<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[神奇辉]]></title>
  <subtitle><![CDATA[吾十有五而志于养猪，三十始养，四十亏本，五十再亏，六十亏大了，七十卒，不逾矩。现廿五，将卒。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://shenqihui.github.io/"/>
  <updated>2015-12-29T01:37:32.000Z</updated>
  <id>http://shenqihui.github.io/</id>
  
  <author>
    <name><![CDATA[神奇辉]]></name>
    <email><![CDATA[c2hlbnFpaHVpMDkyMEBnbWFpbC5jb20K]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[三句话]]></title>
    <link href="http://shenqihui.github.io/2015/12/29/three_word/"/>
    <id>http://shenqihui.github.io/2015/12/29/three_word/</id>
    <published>2015-12-29T01:32:30.000Z</published>
    <updated>2015-12-29T01:37:32.000Z</updated>
    <content type="html"><![CDATA[<p>知人不必言尽，言尽则无友。</p>
<p>责人不必苛尽，苛尽则众远。</p>
<p>敬人不必卑尽，卑尽则少骨。</p>
<p><img src="/img/three_word.jpg" alt=""></p>
<p>来自 <a href="http://weibo.com/2863587811/DaC6479QN" target="_blank" rel="external">阿狸日志</a></p>
<a id="more"></a>
<hr>
<p><img src="/img/cat_1.gif" alt="汪汪汪"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>知人不必言尽，言尽则无友。</p>
<p>责人不必苛尽，苛尽则众远。</p>
<p>敬人不必卑尽，卑尽则少骨。</p>
<p><img src="/img/three_word.jpg" alt=""></p>
<p>来自 <a href="http://weibo.com/2863587811/DaC6479QN">阿狸日志</a></p>]]>
    
    </summary>
    
      <category term="life" scheme="http://shenqihui.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[滑雪]]></title>
    <link href="http://shenqihui.github.io/2015/12/28/skiing/"/>
    <id>http://shenqihui.github.io/2015/12/28/skiing/</id>
    <published>2015-12-28T12:10:47.000Z</published>
    <updated>2015-12-28T09:14:26.000Z</updated>
    <content type="html"><![CDATA[<p>这个周日（2015/12/27），老王带着我们去滑雪了。<br>去滑雪了，第一次滑雪，多少有点紧张。</p>
<p>挂着缆车上去坡顶，看下来就腿抖。下来基本靠摔。</p>
<a id="more"></a>
<p>在雪场，手机根本没法用，就一冻冰冰的板砖，忘了把另外一台手机带上。</p>
<p>老王，Ella，hamer，我。</p>
<p>门口大合照：<br><img src="/picture/skiing/thumb_IMG_1183_1024.jpg" alt=""><br>logo<br><img src="/picture/skiing/thumb_IMG_1184_1024.jpg" alt=""><br><img src="/picture/skiing/thumb_IMG_1185_1024.jpg" alt=""><br>四人自拍。<br><img src="/picture/skiing/thumb_IMG_1186_1024.jpg" alt=""><br>三人自拍。<br><img src="/picture/skiing/thumb_IMG_1187_1024.jpg" alt=""><br>hamer 摔肿的脸<br><img src="/picture/skiing/thumb_IMG_1188_1024.jpg" alt=""><br>午餐<br><img src="/picture/skiing/thumb_IMG_1189_1024.jpg" alt=""><br><img src="/picture/skiing/thumb_IMG_1190_1024.jpg" alt=""><br>大合照<br><img src="/picture/skiing/thumb_IMG_1191_1024.jpg" alt="">  </p>
<p>没摔够。<br>下次试试单板吗？</p>
<hr>
<p><img src="/img/cat_1.gif" alt="汪汪汪"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这个周日（2015/12/27），老王带着我们去滑雪了。<br>去滑雪了，第一次滑雪，多少有点紧张。</p>
<p>挂着缆车上去坡顶，看下来就腿抖。下来基本靠摔。</p>]]>
    
    </summary>
    
      <category term="travel" scheme="http://shenqihui.github.io/tags/travel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[海南骑行环岛游]]></title>
    <link href="http://shenqihui.github.io/2015/12/28/bicycling_around_hainan_island/"/>
    <id>http://shenqihui.github.io/2015/12/28/bicycling_around_hainan_island/</id>
    <published>2015-12-28T04:09:41.000Z</published>
    <updated>2015-12-28T08:49:56.000Z</updated>
    <content type="html"><![CDATA[<p>和小光耀辉付总去海南浪了一个星期，2015/12/12-2015/12/19，写下游记，供大家赏，虽然没几个人看。也方便以后老了回忆。<br>这几天中，应该是神州 517 最好玩了。可惜天气原因去不了潜水。<br>中途，骑车了 450 公里，最高时速应该 43-45 这区间。共 4 天骑车。  </p>
<p><video src="/picture/hainan/1.mp4"></video><br>总体感觉，挺爽的。<br>多图杀流量。<br><a id="more"></a><br>反正你都点击进来了。  </p>
<h2 id="12号第一天">12号第一天</h2><p>四点起床，赶飞机，<br><img src="/picture/hainan/thumb_IMG_0482_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0484_1024.jpg" alt="">  </p>
<p>中午12点多的到海南。下海南，天气很好。<br><img src="/picture/hainan/thumb_IMG_0490_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0495_1024.jpg" alt=""><br>刚下飞机，走到站厅，就有更衣间了，贴心。  </p>
<p>然后，直接去海口 517 青旅。<br>某个房间的葫芦娃：<br><img src="/picture/hainan/thumb_IMG_0498_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0499_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0501_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0500_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0502_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0505_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0504_1024.jpg" alt="">  </p>
<p>晚上会了一队友的好友，吃了顿饭。感受下海口超多的电单车。<br><img src="/picture/hainan/thumb_IMG_0506_1024.jpg" alt="">  </p>
<h2 id="13_号，目的地，文昌_517_青旅">13 号，目的地，文昌 517 青旅</h2><p>第一天出发，慢慢来，付总今天很吃力，不过今天突破极限，明天就马上 gogogo 了。<br>小光的腿：<br><img src="/picture/hainan/thumb_IMG_0508_1024.jpg" alt=""><br>我：<br><img src="/picture/hainan/thumb_IMG_0509_1024.jpg" alt=""><br>喝的椰子：<br><img src="/picture/hainan/thumb_IMG_0511_1024.jpg" alt="">  </p>
<h2 id="14_号，目的地，博鳌_517_青旅">14 号，目的地，博鳌 517 青旅</h2><p>早上，很早，去了下东郊椰林，一路狂飙。今天吃了顿很便宜很好吃的海鲜。<br><img src="/picture/hainan/thumb_IMG_0511_1024.jpg" alt="">  </p>
<p><img src="/picture/hainan/thumb_IMG_0516_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0517_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0517_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0518_1024.jpg" alt=""><br>碰到一家渔民刚好回来：<br><img src="/picture/hainan/thumb_IMG_0520_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0539_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0564_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0575_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0592_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0593_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0594_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0595_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0599_1024.jpg" alt=""><br>码表最大速度坏了：<br><img src="/picture/hainan/thumb_IMG_0600_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0601_1024.jpg" alt=""><br>继续出发：<br>龙哥的村，<br><img src="/picture/hainan/thumb_IMG_0605_1024.jpg" alt=""><br>在海南找个冰棍真难啊，海南人都不怎么吃冰棍。<br><img src="/picture/hainan/thumb_IMG_0607_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0608_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0609_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0610_1024.jpg" alt=""><br>到了目的地，中途抬了下单车走了草丛下海，然后到了妈祖庙。<br><img src="/picture/hainan/thumb_IMG_0611_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0612_1024.jpg" alt="">  </p>
<h2 id="15_号，目的地，神州_517_青旅">15 号，目的地，神州 517 青旅</h2><p>今天拍了好多，<br>今天出发前，带上了个小帅哥，路上碰到了个陈奕迅里面的阿怪类型的人。<br><img src="/picture/hainan/thumb_IMG_0613_1024.jpg" alt=""><br>博鳌旧址，<br><img src="/picture/hainan/thumb_IMG_0614_1024.jpg" alt=""><br>槟郎<br><img src="/picture/hainan/thumb_IMG_0615_1024.jpg" alt=""><br>多美的树林河流<br><img src="/picture/hainan/thumb_IMG_0616_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0617_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0618_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0619_1024.jpg" alt=""><br>路边的小花<br><img src="/picture/hainan/thumb_IMG_0620_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0621_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0622_1024.jpg" alt=""><br>搭船过海<br><img src="/picture/hainan/thumb_IMG_0623_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0624_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0625_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0626_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0627_1024.jpg" alt=""><br>过完海，走走走，某个国道，一堆的沙路，很漂亮，还有大拖拉机。<br><img src="/picture/hainan/thumb_IMG_0628_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0629_1024.jpg" alt=""><br>母鸡，地面都是沙。<br><img src="/picture/hainan/thumb_IMG_0630_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0631_1024.jpg" alt=""><br>大花角的小路入口，2公里多而已。<br><img src="/picture/hainan/thumb_IMG_0632_1024.jpg" alt=""><br>大花角路前的某个海滩，下完一个大坡就快到了，<br><img src="/picture/hainan/thumb_IMG_0633_1024.jpg" alt=""><br>到了传说中的大花角，军事禁区，要翻越围栏，小光不敢进，就几个人偷偷进去了。别信上图中的那些老伯带路，左侧的小路，顺着脚印或者车砸就上去吧。（反正我是骑车上去到围栏那边了）。<br>朝着海里尿了一泡，大花角还了我一个浪，扑湿了我的右鞋。<br>ps：这里是军事禁区，晚上住宿旅店，碰到一个人，就是因为在这乱转，被抓去教育了一顿并且删除照片了。<br><img src="/picture/hainan/thumb_IMG_0634_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0635_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0636_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0638_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0640_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0642_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0643_1024.jpg" alt=""><br>耀辉的背影<br><img src="/picture/hainan/thumb_IMG_0650_1024.jpg" alt=""><br>付总的背影<br><img src="/picture/hainan/thumb_IMG_0651_1024.jpg" alt=""><br>正在建设的的高速公路的一景。<br><img src="/picture/hainan/thumb_IMG_0652_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0653_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0654_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0655_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0656_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0657_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0658_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0659_1024.jpg" alt=""><br>漂亮的高速公里。<br><img src="/picture/hainan/thumb_IMG_0660_1024.jpg" alt=""><br>正在维修的桥。<br><img src="/picture/hainan/thumb_IMG_0661_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0662_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0663_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0664_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0665_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0666_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0667_1024.jpg" alt=""><br>墓<br><img src="/picture/hainan/thumb_IMG_0668_1024.jpg" alt=""><br>好大一群牛<br><img src="/picture/hainan/thumb_IMG_0669_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0670_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0671_1024.jpg" alt=""><br>休息点，转入某个路。<br><img src="/picture/hainan/thumb_IMG_0672_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0673_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0674_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0675_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0676_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0677_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0678_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0679_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0680_1024.jpg" alt=""><br>还有这个跑掉的夕阳，一转眼就掉下去了。<br><img src="/picture/hainan/thumb_IMG_0681_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0682_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0683_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0684_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0685_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0686_1024.jpg" alt=""><br>六小伙吃完一顿，继续出发<br><img src="/picture/hainan/thumb_IMG_0687_1024.jpg" alt=""><br>神州 517 青旅里的调皮小猫。<br><img src="/picture/hainan/thumb_IMG_0688_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0689_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0690_1024.jpg" alt="">  </p>
<h1 id="16_号，亮子兴隆神州带飞">16 号，亮子兴隆神州带飞</h1><p>今天没骑行<br>喝了最古来的咖啡，逛了下兴隆植物园（一般般，比华南植物园差（个人感觉上））。<br>第一站，骑行，兴隆华侨花园，最大的花园园林。<br>我不知道这是啥。<br><img src="/picture/hainan/thumb_IMG_0699_1024.jpg" alt=""><br>这个湖这个人<br><img src="/picture/hainan/thumb_IMG_0703_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0730_1024.jpg" alt=""><br>耀辉<br><img src="/picture/hainan/thumb_IMG_0731_1024.jpg" alt=""><br>付总<br><img src="/picture/hainan/thumb_IMG_0752_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0753_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0755_1024.jpg" alt=""><br>我<br><img src="/picture/hainan/thumb_IMG_0763_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0764_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0765_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0770_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0778_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0798_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0801_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0802_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0803_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0807_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0808_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0810_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0812_1024.jpg" alt=""><br>继续出发，出发前，喝了最古老的咖啡，最美的公路，坡度还是挺大。<br><img src="/picture/hainan/thumb_IMG_0813_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0814_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0815_1024.jpg" alt=""><br>到了植物园，开始逛。<br><img src="/picture/hainan/thumb_IMG_0816_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0817_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0818_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0819_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0820_1024.jpg" alt=""><br>其中一种无花果<br><img src="/picture/hainan/thumb_IMG_0821_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0822_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0823_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0824_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0825_1024.jpg" alt=""><br>可可，巧克力原料<br><img src="/picture/hainan/thumb_IMG_0826_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0827_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0828_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0829_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0830_1024.jpg" alt=""><br>见血封侯，汁液毒毒毒，你好毒你好毒你好毒。<br><img src="/picture/hainan/thumb_IMG_0831_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0832_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0833_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0834_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0835_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0836_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0837_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0838_1024.jpg" alt="">  </p>
<p>晚上，在神州 517 ，大伙一起吃。好多菜好多肉。<br><img src="/picture/hainan/thumb_IMG_0839_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0840_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0841_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0842_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0843_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0844_1024.jpg" alt="">  </p>
<h1 id="17_号，兵分两路，耀辉走高速，三走国道，我带队。目的地_三亚_517">17 号，兵分两路，耀辉走高速，三走国道，我带队。目的地 三亚 517</h1><p>今天是路程最远的一天， 150 公里，早出晚归，到了目的地，饿成狗。然后去吃了烧烤，和那个在大花角被抓去教育的贵州小伙一起。<br>今天经历两个大坡，牛岭，入三亚的一个坡<br>牛岭，以及入三亚的一个坡<br>咖啡厂<br><img src="/picture/hainan/thumb_IMG_0845_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0846_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0847_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0848_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0849_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0850_1024.jpg" alt=""><br>还是这种景观<br><img src="/picture/hainan/thumb_IMG_0851_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0852_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0853_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0854_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0855_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0856_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0858_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0859_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0860_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0861_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0862_1024.jpg" alt=""><br>小光爆胎了。遇见神人。<br><img src="/picture/hainan/thumb_IMG_0863_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0864_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0865_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0866_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0867_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0868_1024.jpg" alt=""><br>牛岭坡顶。<br><img src="/picture/hainan/thumb_IMG_0869_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0870_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0871_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0872_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0873_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0874_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0875_1024.jpg" alt=""><br>红色的摩擦带减速。<br><img src="/picture/hainan/thumb_IMG_0876_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0877_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0878_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0879_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0880_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0881_1024.jpg" alt=""><br>下了牛岭，就吃午饭了，吃了个很好吃的卤猪脚，还有围观的阿旺，以及店家的小妹妹。<br><img src="/picture/hainan/thumb_IMG_0885_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0886_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0887_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0888_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0889_1024.jpg" alt=""><br>继续出发到了陵水。<br><img src="/picture/hainan/thumb_IMG_0890_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0891_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0892_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0894_1024.jpg" alt=""><br>本来这张图打算发给耀辉的，还是没发。之后就开始出发第二个大坡了。<br><img src="/picture/hainan/thumb_IMG_0895_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0896_1024.jpg" alt=""><br>传说中的大坡，上坡路很长，下坡有大坑，沙子也多，比较危险，我差几点就摔了。<br><img src="/picture/hainan/thumb_IMG_0897_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0898_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0899_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0900_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0901_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0902_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0903_1024.jpg" alt=""><br>我在坡下面等他们。 结果付总下来了之后，一直维持着 30 的速度走了 4 公里，我在后面一直追。<br><img src="/picture/hainan/thumb_IMG_0904_1024.jpg" alt=""><br>晚上到三亚 517 了。</p>
<h1 id="18_号，三亚完，住老班长青旅（差评。。。）">18 号，三亚完，住老班长青旅（差评。。。）</h1><p>寄了几张明信片，在沙滩看了下美女，吃了卤煮。买了特产，下海游了泳。<br><img src="/picture/hainan/thumb_IMG_0910_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0911_1024.jpg" alt=""><br>寄了明信片，<br><img src="/picture/hainan/thumb_IMG_0915_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0916_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0925_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0927_1024.jpg" alt=""><br>给龙哥。<br><img src="/picture/hainan/thumb_IMG_0919_1024.jpg" alt=""><br>三亚的海滩和妹子：<br><img src="/picture/hainan/thumb_IMG_0928_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0929_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0930_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0931_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0932_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0933_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0935_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0936_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0937_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0938_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0941_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0943_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0944_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0945_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0946_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0947_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0948_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0949_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0950_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0951_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0952_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0953_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0954_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0955_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0956_1024.jpg" alt=""><br>坐直升机的地方<br><img src="/picture/hainan/thumb_IMG_0957_1024.jpg" alt=""><br>忘了当时这都比在干啥。<br><img src="/picture/hainan/thumb_IMG_0958_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0959_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0960_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0961_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0962_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0963_1024.jpg" alt=""><br>这就是老班长，居然有几个大妈大爷。。。。<br><img src="/picture/hainan/thumb_IMG_0965_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0966_1024.jpg" alt=""><br>应龙哥需求，告诉他们 qq 号。<br><img src="/picture/hainan/thumb_IMG_0967_1024.jpg" alt="">  </p>
<h1 id="19_号，三亚回海口，逛骑楼老街，吃海口骑楼小吃街小吃。">19 号，三亚回海口，逛骑楼老街，吃海口骑楼小吃街小吃。</h1><p><img src="/picture/hainan/thumb_IMG_0968_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0969_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0970_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0971_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0972_1024.jpg" alt=""><br>表白和拉黑：<br><img src="/picture/hainan/thumb_IMG_0973_1024.jpg" alt=""><br>骑楼老街：<br><img src="/picture/hainan/thumb_IMG_0974_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0975_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0976_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0977_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0978_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0979_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0980_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0981_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0982_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0983_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0984_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0985_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0986_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0987_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0988_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0989_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0990_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0991_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0992_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0993_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0994_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0995_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0996_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0997_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0998_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_0999_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1001_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1002_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1003_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1004_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1005_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1006_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1007_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1008_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1009_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1010_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1011_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1012_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1013_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1014_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1015_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1016_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1017_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1018_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1019_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1020_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1021_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1022_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1023_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1024_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1025_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1026_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1027_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1028_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1029_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1030_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1031_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1032_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1033_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1034_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1035_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1036_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1037_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1038_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1039_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1040_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1041_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1042_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1043_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1044_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1045_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1046_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1047_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1048_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1049_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1050_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1051_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1052_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1053_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1054_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1055_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1056_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1057_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1058_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1059_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1060_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1061_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1062_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1063_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1064_1024.jpg" alt=""><br>星球大战。<br><img src="/picture/hainan/thumb_IMG_1065_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1066_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1067_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1068_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1069_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1070_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1071_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1072_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1073_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1074_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1075_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1076_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1077_1024.jpg" alt=""><br>网上直接跑火车站，上铺是妹子，下铺是小光。<br>拆掉火车过琼州海峡，结果火车开着开着晚点 1 小时了。</p>
<h1 id="20_号，火车路上，以及吃的泡面火腿肠。">20 号，火车路上，以及吃的泡面火腿肠。</h1><p><img src="/picture/hainan/thumb_IMG_1080_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1081_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1082_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1083_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1084_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1085_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1086_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1087_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1088_1024.jpg" alt=""><br><img src="/picture/hainan/thumb_IMG_1089_1024.jpg" alt="">  </p>
<h1 id="21_北京，周一">21 北京，周一</h1><p>早上八点到北京。晚点1小时了。打车回家洗澡回去上班。</p>
<h1 id="end">end</h1>]]></content>
    <summary type="html">
    <![CDATA[<p>和小光耀辉付总去海南浪了一个星期，2015/12/12-2015/12/19，写下游记，供大家赏，虽然没几个人看。也方便以后老了回忆。<br>这几天中，应该是神州 517 最好玩了。可惜天气原因去不了潜水。<br>中途，骑车了 450 公里，最高时速应该 43-45 这区间。共 4 天骑车。  </p>
<p><video src="/picture/hainan/1.mp4"></video><br>总体感觉，挺爽的。<br>多图杀流量。<br>]]>
    
    </summary>
    
      <category term="旅游" scheme="http://shenqihui.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
      <category term="海南" scheme="http://shenqihui.github.io/tags/%E6%B5%B7%E5%8D%97/"/>
    
      <category term="骑行" scheme="http://shenqihui.github.io/tags/%E9%AA%91%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[fab 部署脚本]]></title>
    <link href="http://shenqihui.github.io/2015/12/10/fab_deploy_simple/"/>
    <id>http://shenqihui.github.io/2015/12/10/fab_deploy_simple/</id>
    <published>2015-12-10T14:23:23.000Z</published>
    <updated>2015-12-10T07:37:03.000Z</updated>
    <content type="html"><![CDATA[<p>这是遇到的某个项目（<a href="https://www.zoomeye.org" target="_blank" rel="external">zoomeye</a>）的 fab 部署脚本的改写通用版本。</p>
<p>可能对大型项目没起作用，但是对于小项目，作用还是很大，所以发出来写个文章分享下。</p>
<a id="more"></a>
<hr>
<h1 id="有啥功能">有啥功能</h1><ul>
<li>部署开发人员的测试环境</li>
<li>部署测试环境</li>
<li>部署生产环境</li>
</ul>
<hr>
<h1 id="部署生产环境">部署生产环境</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">fab</span> <span class="tag">deploy</span><span class="pseudo">:master</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="部署测试环境">部署测试环境</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">fab</span> <span class="tag">deploy</span><span class="pseudo">:dev</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="部署开发人员的测试环境">部署开发人员的测试环境</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">fab</span> <span class="tag">deploy</span><span class="pseudo">:test</span>,<span class="tag">userA</span>,<span class="tag">funBranch</span>,<span class="tag">ubuntu</span><span class="at_rule">@<span class="keyword">10.10.10.12</span></span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="依赖">依赖</h1><p>python, pip, fabric<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> build-essential <span class="keyword">python</span>-dev <span class="keyword">python</span>-pip</span><br><span class="line">sudo pip install fabric</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="配置">配置</h1><ul>
<li>前 30 行针对性修改</li>
<li>git 地址针对性修改</li>
<li>部署前，前端编译，后端编译等等针对修改</li>
<li>部署后，环境安装，服务重启等等针对修改</li>
</ul>
<hr>
<h1 id="注意事项：">注意事项：</h1><ul>
<li>所有机器的 ssh 端口，都统一，不支持运行时修改 ssh 端口</li>
<li>所有仓库的仓库名都一致， 推荐 fork 方式进行 git 协助</li>
<li>执行这脚本的机器有 ssh 方式部署各个部署 git 仓库的权限，有 ssh 方式访问各个部署机器的权限。</li>
</ul>
<hr>
<p>看看源码：</p>
<script src="http://gist.stutostu.com/shenqihui/64205c52078ce6c14602.js?file=fabfile.py"></script>

<hr>
<p>更多详情，查看 <a href="https://gist.github.com/shenqihui/64205c52078ce6c14602" target="_blank" rel="external">https://gist.github.com/shenqihui/64205c52078ce6c14602</a></p>
<p>另外推荐：</p>
<ul>
<li><a href="http://lvyaojia.sinaapp.com/2015/01/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2snippet-gitlabfabric/" target="_blank" rel="external">项目部署SNIPPET (GITLAB+FABRIC)</a></li>
<li><a href="http://www.fabfile.org/" target="_blank" rel="external">fabric 官网</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是遇到的某个项目（<a href="https://www.zoomeye.org">zoomeye</a>）的 fab 部署脚本的改写通用版本。</p>
<p>可能对大型项目没起作用，但是对于小项目，作用还是很大，所以发出来写个文章分享下。</p>]]>
    
    </summary>
    
      <category term="proxy" scheme="http://shenqihui.github.io/tags/proxy/"/>
    
      <category term="部署脚本" scheme="http://shenqihui.github.io/tags/%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[给你们介绍下几大暗黑搜索引擎]]></title>
    <link href="http://shenqihui.github.io/2015/12/08/dark_search/"/>
    <id>http://shenqihui.github.io/2015/12/08/dark_search/</id>
    <published>2015-12-08T01:50:00.000Z</published>
    <updated>2015-12-08T01:59:10.000Z</updated>
    <content type="html"><![CDATA[<p>给你们介绍下几大暗黑搜索引擎：<br><a href="https://www.shodan.io/" target="_blank" rel="external">https://www.shodan.io/</a> 撒旦。美帝。<br><a href="https://www.zoomeye.org/" target="_blank" rel="external">https://www.zoomeye.org/</a> 钟馗之眼。中国。<br><a href="https://www.censys.io" target="_blank" rel="external">https://www.censys.io</a> 。 nmap 创始人创建， google 支持。</p>
<a id="more"></a>
<p>还有一堆小厂的，绿盟、360、安天之类的。</p>
<p><img src="/img/cat_1.gif" alt="汪汪汪"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>给你们介绍下几大暗黑搜索引擎：<br><a href="https://www.shodan.io/">https://www.shodan.io/</a> 撒旦。美帝。<br><a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a> 钟馗之眼。中国。<br><a href="https://www.censys.io">https://www.censys.io</a> 。 nmap 创始人创建， google 支持。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于颜色的几种形式]]></title>
    <link href="http://shenqihui.github.io/2015/11/20/about_color/"/>
    <id>http://shenqihui.github.io/2015/11/20/about_color/</id>
    <published>2015-11-20T03:01:30.000Z</published>
    <updated>2015-12-08T01:53:27.000Z</updated>
    <content type="html"><![CDATA[<p>关于颜色的几种形式</p>
<p>简单来说，总共有： RGB, CMYK, HSB 。<br>但是，在 Web 和其他领域的使用层面上，还有很多。</p>
<a id="more"></a>
<p>rgb(#5a8120), rgba(rgba(90, 129, 32, 0.5)), argb(#805a1794), hsl(hsl(90, 100%, 50%)), hsla(hsl(90, 100%, 50%, 0.5)), hsv(hsv(90, 100%, 50%)), hsva(hsva(90, 100%, 50%, 0.5)), </p>
<p>这个基本上很常用很常用的了。<br><a href="http://lesscss.org/functions/#color-definition" target="_blank" rel="external">LESS</a>，</p>
<p><img src="/img/cat_1.gif" alt="汪汪汪"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于颜色的几种形式</p>
<p>简单来说，总共有： RGB, CMYK, HSB 。<br>但是，在 Web 和其他领域的使用层面上，还有很多。</p>]]>
    
    </summary>
    
      <category term="color" scheme="http://shenqihui.github.io/tags/color/"/>
    
      <category term="web" scheme="http://shenqihui.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建网络代理的几种方法。]]></title>
    <link href="http://shenqihui.github.io/2015/10/18/how_to_proxy/"/>
    <id>http://shenqihui.github.io/2015/10/18/how_to_proxy/</id>
    <published>2015-10-18T13:21:21.000Z</published>
    <updated>2015-10-18T13:23:18.000Z</updated>
    <content type="html"><![CDATA[<p>搭建网络代理的几种方法。</p>
<a id="more"></a>
<h1 id="讲讲代理方法">讲讲代理方法</h1><h2 id="shadowsocks">shadowsocks</h2><p>这个基本上很常用很常用的了。<br>需要服务器端和客户端，具体详情，查看<a href="https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File" target="_blank" rel="external">官网</a>，都很简单的，加密通信。<br>缺点就是：一定要需要客户端，而且，转成 http 代理有点麻烦。</p>
<h2 id="ssh_转发">ssh 转发</h2><p>一条指令即可，直接生成了一个 socks5 的代理：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ssh</span> -N -D <span class="number">127.0.0.1:8080</span> user<span class="variable">@vpsip</span> -p sshport</span><br></pre></td></tr></table></figure></p>
<p>基于 ssh 进行的代理。<br>缺点：客户端执行 ssh 。</p>
<h2 id="直接创建_proxy">直接创建 proxy</h2><p>网上一堆软件。github 搜索关键字 <code>proxy</code> ，基本上一堆，直接按照说明运行，即可开启一个 http(s) 的代理。</p>
<h1 id="另外">另外</h1><p>同事推荐了 cow ，好像不错，还没尝试使用。</p>
<p><img src="/img/cat_1.gif" alt="汪汪汪"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>搭建网络代理的几种方法。</p>]]>
    
    </summary>
    
      <category term="proxy" scheme="http://shenqihui.github.io/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[西藏旅游的回忆]]></title>
    <link href="http://shenqihui.github.io/2015/10/14/tibet_tourism_at_2015_national_day/"/>
    <id>http://shenqihui.github.io/2015/10/14/tibet_tourism_at_2015_national_day/</id>
    <published>2015-10-14T01:24:01.000Z</published>
    <updated>2015-10-14T03:54:13.000Z</updated>
    <content type="html"><![CDATA[<p>这个国庆，我和同事做了一次大死，去西藏。<br>说起来好像挺文艺的。<br><a id="more"></a><br>然而，并不是。</p>
<hr>
<p>下面开始我的流水账。</p>
<hr>
<h1 id="2015_年_09_月_30_日">2015 年 09 月 30 日</h1><p>今天公司提早下班，下午两点就能走人。所以我们就两点多走去买泡面了，五点多出发去火车站。八点十五的 Z21 号直达火车，开始了我们 40 个小时的硬座时间。</p>
<p>无惊无险，地铁并不多人，只是火车上太多了。</p>
<p>在这一天，碰上了另外两个小妞。也就让我们接下来的旅程里面，五人同行。神奇、小光、刚哥、玛丽、柯萍。外加先去的老王狐狸。</p>
<p>坐我旁边的帅哥（忘了名字）是在太胖，把我挤成狗了。<br>这就是我们的六人卡座。</p>
<hr>
<h1 id="2015_年_10_月_01_日">2015 年 10 月 01 日</h1><p>第一个晚上在车上睡，是在睡得渣渣的，也就只能这样子了，多次由于身体不同的地方麻痹而醒来。</p>
<p>早上，忘了几点醒来了。第一眼看到的是柯萍小美女。(☆_☆)。醒来再趴一会吧。</p>
<p>无惊无险，火车没有在我睡着的时候翻车，醒来的时候，拉开窗帘，看看外面的阳光，没死，真好。</p>
<p>12点多，旁边那个帅哥在兰州下车了。我们的座位就宽敞了，这个时候我们几个都聊得很开了，就酱 ~ 。</p>
<p>在不记得哪个站了，果断去补了一张卧铺，能补上，软卧。╭(°A°`)╮。晚上十点半之后，过去睡了。</p>
<p>特别说一下，乘务员特美。</p>
<p>一番折腾，三小伙调位，还是集合到一个车厢了。两小妞，就直接躺着我们的那个卡座了，自动升级两硬卧。</p>
<p>可惜，睡得不熟。</p>
<hr>
<h1 id="2015_年_10_月_02_日">2015 年 10 月 02 日</h1><p>这天的凌晨，到达了唐古拉山了，旅程中海拔最高的地点，三点多的时候，醒来了，过了不久，小光起床夜尿去了，下床的时候，手拍到我乐。</p>
<p>然而，他开始了为期几天的高原反应。毕竟他是壮汉啊。</p>
<p>醒来，小妞说手机已死，我就把刚哥的充电宝送过去了。</p>
<p>一路上，大山大岭，山羊耗牛，卧铺大叔，藏族大哥，一个个萌萌哒。</p>
<p>下午 1 点多，到了。巴拉巴拉（小魔仙）。</p>
<p>拉萨出站，广场不让进，也就只能这样咯，自拍神器此时出场，拍拍拍，到此一游了。</p>
<p>找旅馆，坐车，回去，洗澡，睡觉，吃饭，第一顿，狐狸带领的石锅鸡，撑。</p>
<p>吃完睡。一躺下我就睡着了，死猪一样。</p>
<hr>
<h1 id="2015_年_10_月_03_日">2015 年 10 月 03 日</h1><p>今天干啥了？</p>
<p>他们三打算看日出，我只能呵呵了。</p>
<p>鉴于小光体质太好，高反未能恢复，就在拉萨城逛。</p>
<p>喝了甜茶，酥油茶，吃了 ** 。</p>
<p>逛了八角街，逛了大昭寺，去了酒吧，小光差点喝吐了。</p>
<p>傍晚回去洗洗睡，准备第二天去纳木措。</p>
<p>这晚上睡得一般。</p>
<hr>
<h1 id="2015_年_10_月_04_日">2015 年 10 月 04 日</h1><p>四点起床，准备，去白塔，集合，出发纳木措。</p>
<p>五点，出发，上车我就睡着了，中途醒来，看看天还是黑漆漆的，</p>
<p>等一会，不知道到了哪个检查点，下车拍个照，我喜欢那个风，刮起来毫不留情，却不似刀子般割脸，还夹杂着丝丝的雪花。拍完 ，gogogo 继续走。</p>
<p>11 点时候吧？到了，有马，有牦牛，有圣湖，有人。</p>
<p>风还是那么大。</p>
<p>圣水把我的鞋拍湿了。</p>
<p>又回去，野餐的两小时。</p>
<p>一个个像死猪一样打不起精神，毕竟这里海拔很高，高原反应开始了。</p>
<p>总计 10+ 个小时坐车时间。</p>
<p>晚上，七小伙，吃小火锅。明天小妞就开始出发了。</p>
<p>没有约上去山南的旅行团。</p>
<hr>
<h1 id="2015_年_10_月_05_日">2015 年 10 月 05 日</h1><p>这个凌晨，小光睡得像死猪一样了。</p>
<p>出发，买礼物，买吃的，吃羊肉。</p>
<p>爬山，西藏的山不是好欺负的，反而会欺负人，走几步就爬不动了。</p>
<p>差不多爬上目的高度，一头牛把我给吓死了，还以为要斗我，不然，第二天，《西藏头条》，《游客游哲蚌寺，惨遭寺中神牛撞死》。</p>
<p>哲蚌寺神狗还是挺多的。一条条要么在吃，要么在睡。</p>
<p>那个下山小道也很有秋天的感觉。</p>
<p>下山，上了量超挤的公交。回家，吃饭，购物，洗洗睡，结果没洗。</p>
<p>而我没睡着，刚好抓到柯萍，她此时不知道经过哪个站了，就在群里聊起了，窗前明月光，地下鞋两双。</p>
<p>就酱，硬生生写了十几句的打油诗。三点多才睡去了。</p>
<hr>
<h1 id="2015_年_10_月_06_日">2015 年 10 月 06 日</h1><p>这个凌晨，小光依然睡得像死猪一样。</p>
<p>洗澡，收拾东西，退房，吃饭，在饭馆呆了好久，出发，去火车站，踏上回去的路程。</p>
<p>The End.</p>
<hr>
<h1 id="2015_年_10_月_06_日-1">2015 年 10 月 06 日</h1><p>火车上，四人卡座，刚哥在走道另一边。</p>
<p>对面是两藏族小妞。萌萌哒。</p>
<p>四人卡座，神奇，扎西小光，卓玛，措姆。</p>
<p>卓玛家有 200 头牛，几千头羊，招女婿吗？</p>
<p>措姆是个小美女。是她说的第一句话吧。</p>
<p>她俩总是唧唧歪歪的自己说藏语，我们都听不懂。就酱，洗洗睡，晚上他们去了餐车睡了。</p>
<hr>
<h1 id="2015_年_10_月_07_日">2015 年 10 月 07 日</h1><p>一天的火车上的行程。</p>
<p>到了兰州，下车买了个烧饼，买了个柚子，特好吃。</p>
<p>又一次洗洗睡。</p>
<p>每一次洗洗，都要翻山越岭，半小时来回，人多啊。</p>
<hr>
<h1 id="2015_年_10_月_08_日">2015 年 10 月 08 日</h1><p>又是一个上班日。</p>
<p>早上八点，到了，到这满脸的胡渣，回公司了，中午回家洗了个澡。</p>
<p>第二天，感冒迹象，到了今天 13 号，咳嗽死了。再见。</p>
<p>The End.</p>
<hr>
<h1 id="照片时间">照片时间</h1><p>图片太多，懒得传了。用 <code>sips</code> 瞬间压缩了一堆，都还原不了，就酱了。(ಥ_ಥ)<br><img src="/picture/tibet/IMG_5921.JPG" alt=""><br><img src="/picture/tibet/IMG_6062.JPG" alt=""><br><img src="/picture/tibet/IMG_6150.JPG" alt=""><br><img src="/picture/tibet/IMG_6405.JPG" alt=""><br><img src="/picture/tibet/IMG_6807.JPG" alt=""><br><img src="/picture/tibet/IMG_5948.JPG" alt=""><br><img src="/picture/tibet/IMG_6063.JPG" alt=""><br><img src="/picture/tibet/IMG_6261.JPG" alt=""><br><img src="/picture/tibet/IMG_6500.JPG" alt=""><br><img src="/picture/tibet/IMG_6816.JPG" alt=""><br><img src="/picture/tibet/IMG_5991.JPG" alt=""><br><img src="/picture/tibet/IMG_6075.JPG" alt=""><br><img src="/picture/tibet/IMG_6297.JPG" alt=""><br><img src="/picture/tibet/IMG_6656.JPG" alt=""><br><img src="/picture/tibet/IMG_6841.JPG" alt=""><br><img src="/picture/tibet/IMG_6000.JPG" alt=""><br><img src="/picture/tibet/IMG_6117.JPG" alt=""><br><img src="/picture/tibet/IMG_6335.JPG" alt=""><br><img src="/picture/tibet/IMG_6749.JPG" alt=""><br><img src="/picture/tibet/IMG_6843.JPG" alt=""><br><img src="/picture/tibet/IMG_6014.JPG" alt=""><br><img src="/picture/tibet/IMG_6126.JPG" alt=""><br><img src="/picture/tibet/IMG_6402.JPG" alt=""><br><img src="/picture/tibet/IMG_6802.JPG" alt=""><br><img src="/picture/tibet/IMG_6878.JPG" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这个国庆，我和同事做了一次大死，去西藏。<br>说起来好像挺文艺的。<br>]]>
    
    </summary>
    
      <category term="旅游" scheme="http://shenqihui.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
      <category term="西藏" scheme="http://shenqihui.github.io/tags/%E8%A5%BF%E8%97%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Django 框架关于 IE 跨域 XDomainRequest 传输的问题]]></title>
    <link href="http://shenqihui.github.io/2015/08/14/test_django_post_request_method/"/>
    <id>http://shenqihui.github.io/2015/08/14/test_django_post_request_method/</id>
    <published>2015-08-14T05:24:01.000Z</published>
    <updated>2015-08-14T06:30:32.000Z</updated>
    <content type="html"><![CDATA[<p>Django 是一个强大的 Web 框架。<br>不过，<br>最近在处理各种跨域传输的问题，其中就遇到了一个坑： Django 服务下 IE 8、9 下面通过 XDomainRequest 无法传输数据的问题。<br><a id="more"></a></p>
<hr>
<h1 id="事情是这样子的。">事情是这样子的。</h1><p>1、 开发了一个接口，处理 POST 的 http 请求，在各类型 XMLHttpRequest 方法下面的 POST 请求基本处理通过来进行数据传输都能实现， request 的 POST 数据都能获取。<br>2、 不过，在 IE 8/9 的时候，使用 XDomainRequest 来进行跨域 POST 传输的时候，却没能获取到 POST 数据。</p>
<h1 id="然后">然后</h1><p>事情就是这样，一开始还以为是 XDomainRequest 的 Ajax 请求代码出问题了。后面经过一番调试，越发觉得这不是 js 代码出问题了，而是 Django 解析出问题了。</p>
<h1 id="所以">所以</h1><p>所以我就要测试，到底是我的 js 代码写错了，还是我的猜测正确了。经过验证，确实是 Django 解析这种请求出问题了。所以，就写下了这篇文章。</p>
<hr>
<h2 id="验证过程">验证过程</h2><p>然后我就开始验证这个过程了。</p>
<h3 id="后端开发不同的_http_服务">后端开发不同的 http 服务</h3><p>使用不用的后端服务进行横向对比验证。</p>
<h4 id="nodejs_的_http_服务">nodejs 的 http 服务</h4><p>使用 nodejs 开发一个 http 服务来处理 POST 请求，横向对比 js 代码是否正确，代码很少，能实现功能就行，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> body = <span class="string">''</span>;</span><br><span class="line">  req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(chunk)</span> </span>&#123;</span><br><span class="line">    body += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line">  req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'POSTed: '</span> + body);</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>,</span><br><span class="line">      <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">      <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'*'</span>,</span><br><span class="line">      <span class="string">'Pragma'</span>: <span class="string">'no-cache'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(<span class="string">'POSTed: '</span> + body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).listen(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure>
<p>使用过程，保存为 <code>node.js</code>， 然后直接运行 <code>node node.js</code> 即可，监听了 3001 端口的 http 服务。</p>
<h4 id="django_的_http_服务">django 的 http 服务</h4><p>这个用来检验，</p>
<p>核心代码如下：<br>1、 <code>views.py</code> 的：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">from django<span class="class">.http</span> import HttpResponse</span><br><span class="line">from django<span class="class">.views</span><span class="class">.decorators</span><span class="class">.csrf</span> import csrf_exempt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@csrf_exempt</span><br><span class="line">def <span class="function"><span class="title">index</span><span class="params">(request)</span></span>:</span><br><span class="line">    <span class="keyword">if</span> request<span class="class">.method</span> == <span class="string">'POST'</span>:</span><br><span class="line">        data = request<span class="class">.POST</span></span><br><span class="line">        print <span class="string">'POSTed: '</span>, data</span><br><span class="line">        response = <span class="function"><span class="title">HttpResponse</span><span class="params">(<span class="string">'POSTed: '</span> + json.dumps(data)</span></span>, content_type=<span class="string">'text/html'</span>)</span><br><span class="line">    elif request<span class="class">.method</span> == <span class="string">'GET'</span>:</span><br><span class="line">        response = <span class="function"><span class="title">HttpResponse</span><span class="params">(<span class="string">'Please use post method'</span>, content_type=<span class="string">'text/html'</span>)</span></span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        response = <span class="function"><span class="title">HttpResponse</span><span class="params">(<span class="string">'What'</span>, content_type=<span class="string">'text/html'</span>)</span></span></span><br><span class="line"></span><br><span class="line">    response[<span class="string">'Access-Control-Allow-Origin'</span>] = <span class="string">'*'</span></span><br><span class="line">    response[<span class="string">'Access-Control-Allow-Headers'</span>] = <span class="string">'*'</span></span><br><span class="line">    response[<span class="string">'Pragma'</span>] = <span class="string">'no-cache'</span></span><br><span class="line"></span><br><span class="line">    return response</span><br></pre></td></tr></table></figure></p>
<p>2、 <code>urls.py</code> 的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^$'</span>, <span class="string">'some_app.views.index'</span>, name=<span class="string">'test_post'</span>),</span><br></pre></td></tr></table></figure></p>
<p>使用过程，保存为 django 的 <code>some_app</code> 对应的 views， 增加到 url 路由中， 然后直接运行 <code>python manage.py runserver 0.0.0.0:3002</code> 即可，监听了 3002 端口的 http 服务。</p>
<h3 id="前端_js_代码请求。">前端 js 代码请求。</h3><p>贴全部出了了。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;test post whit django and nodejs&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      .red &#123;</span><br><span class="line">        color: red;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;<span class="type">Test</span> <span class="type">Django</span> <span class="type">POST</span> <span class="type">Request</span> <span class="type">Method</span>&lt;/h1&gt;</span><br><span class="line">    &lt;h3&gt;core code&lt;/h3&gt;</span><br><span class="line">    &lt;pre&gt;</span><br><span class="line">      <span class="keyword">var</span> host = location.hostname;</span><br><span class="line">      <span class="keyword">var</span> sendTimeout = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">var</span> ajax = function(url, <span class="class"><span class="keyword">type</span>) &#123;</span></span><br><span class="line">        <span class="keyword">if</span>(window.<span class="type">XDomainRequest</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> xdomainAjax = <span class="keyword">new</span> <span class="type">XDomainRequest</span>();</span><br><span class="line">          xdomainAjax.open(<span class="symbol">'POS</span>T', url);</span><br><span class="line">          xdomainAjax.timeout = <span class="number">1200</span>;</span><br><span class="line">          xdomainAjax.onload = function()&#123;</span><br><span class="line">            console.log(<span class="class"><span class="keyword">type</span> <span class="title">+</span> ' <span class="keyword"><span class="keyword">with</span></span> <span class="title">XDomainRequest</span>:</span> ', <span class="keyword">this</span>.responseText);</span><br><span class="line">            document.getElementById(<span class="class"><span class="keyword">type</span> <span class="title">+</span> '<span class="title">-xdomain</span>').<span class="title">innerHTML</span> =</span> <span class="class"><span class="keyword">type</span> <span class="title">+</span> ' <span class="keyword"><span class="keyword">with</span></span> <span class="title">XDomainRequest</span> <span class="title">respone</span>:</span> &lt;span <span class="class"><span class="keyword">class</span>=</span><span class="string">"red"</span>&gt;' + <span class="keyword">this</span>.responseText + '&lt;/span&gt;';</span><br><span class="line">          &#125;</span><br><span class="line">          xdomainAjax.onerror = function() &#123;</span><br><span class="line">            console.log(<span class="symbol">'node</span> error', <span class="keyword">this</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          setTimeout(function() &#123;</span><br><span class="line">            xdomainAjax.send(<span class="symbol">'param1</span>=value1&amp;param2=value2');</span><br><span class="line">          &#125;, sendTimeout)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(window.<span class="type">XMLHttpRequest</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> xmlAjax = <span class="keyword">new</span> <span class="type">XMLHttpRequest</span>();</span><br><span class="line">          xmlAjax.open(<span class="symbol">'POS</span>T', url);</span><br><span class="line">          xmlAjax.timeout = <span class="number">1200</span>;</span><br><span class="line">          xmlAjax.onreadystatechange = function()&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.readyState==<span class="number">4</span> &amp;&amp; <span class="keyword">this</span>.status==<span class="number">200</span>) &#123;</span><br><span class="line">              console.log(<span class="class"><span class="keyword">type</span> <span class="title">+</span> ' <span class="keyword"><span class="keyword">with</span></span> <span class="title">XMLHttpRequest</span>:</span> ', <span class="keyword">this</span>.responseText);</span><br><span class="line">              document.getElementById(<span class="class"><span class="keyword">type</span> <span class="title">+</span> '<span class="title">-xml</span>').<span class="title">innerHTML</span> =</span> <span class="class"><span class="keyword">type</span> <span class="title">+</span> ' <span class="keyword"><span class="keyword">with</span></span> <span class="title">XMLHttpRequest</span> <span class="title">respone</span>:</span> &lt;span <span class="class"><span class="keyword">class</span>=</span><span class="string">"red"</span>&gt;' + <span class="keyword">this</span>.responseText + '&lt;/span&gt;';</span><br><span class="line">              </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          setTimeout(function() &#123;</span><br><span class="line">            xmlAjax.send(<span class="symbol">'param1</span>=value1&amp;param2=value2');</span><br><span class="line">          &#125;, sendTimeout)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/pre&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h3&gt;node respone&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      ajax code:</span><br><span class="line">      &lt;pre&gt;</span><br><span class="line">        ajax(<span class="symbol">'http</span>:<span class="comment">//'+host+':3001/', 'node');</span></span><br><span class="line">      &lt;/pre&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;pre id=<span class="string">"node-xml"</span>&gt;&lt;/pre&gt;</span><br><span class="line">    &lt;pre id=<span class="string">"node-xdomain"</span>&gt;&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;django respone&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      ajax code:</span><br><span class="line">      &lt;pre&gt;</span><br><span class="line">        ajax(<span class="symbol">'http</span>:<span class="comment">//'+host+':3002/', 'django');</span></span><br><span class="line">      &lt;/pre&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;pre id=<span class="string">"django-xml"</span>&gt;&lt;/pre&gt;</span><br><span class="line">    &lt;pre id=<span class="string">"django-xdomain"</span>&gt;&lt;/pre&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      <span class="keyword">var</span> host = location.hostname;</span><br><span class="line">      <span class="keyword">var</span> sendTimeout = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">var</span> ajax = function(url, <span class="class"><span class="keyword">type</span>) &#123;</span></span><br><span class="line">        <span class="keyword">if</span>(window.<span class="type">XDomainRequest</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> xdomainAjax = <span class="keyword">new</span> <span class="type">XDomainRequest</span>();</span><br><span class="line">          xdomainAjax.open(<span class="symbol">'POS</span>T', url);</span><br><span class="line">          xdomainAjax.timeout = <span class="number">1200</span>;</span><br><span class="line">          xdomainAjax.onload = function()&#123;</span><br><span class="line">            console.log(<span class="class"><span class="keyword">type</span> <span class="title">+</span> ' <span class="keyword"><span class="keyword">with</span></span> <span class="title">XDomainRequest</span>:</span> ', <span class="keyword">this</span>.responseText);</span><br><span class="line">            document.getElementById(<span class="class"><span class="keyword">type</span> <span class="title">+</span> '<span class="title">-xdomain</span>').<span class="title">innerHTML</span> =</span> <span class="class"><span class="keyword">type</span> <span class="title">+</span> ' <span class="keyword"><span class="keyword">with</span></span> <span class="title">XDomainRequest</span> <span class="title">respone</span>:</span> &lt;span <span class="class"><span class="keyword">class</span>=</span><span class="string">"red"</span>&gt;' + <span class="keyword">this</span>.responseText + '&lt;/span&gt;';</span><br><span class="line">          &#125;</span><br><span class="line">          xdomainAjax.onerror = function() &#123;</span><br><span class="line">            console.log(<span class="symbol">'node</span> error', <span class="keyword">this</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          setTimeout(function() &#123;</span><br><span class="line">            xdomainAjax.send(<span class="symbol">'param1</span>=value1&amp;param2=value2');</span><br><span class="line">          &#125;, sendTimeout)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(window.<span class="type">XMLHttpRequest</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> xmlAjax = <span class="keyword">new</span> <span class="type">XMLHttpRequest</span>();</span><br><span class="line">          xmlAjax.open(<span class="symbol">'POS</span>T', url);</span><br><span class="line">          xmlAjax.timeout = <span class="number">1200</span>;</span><br><span class="line">          xmlAjax.onreadystatechange = function()&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.readyState==<span class="number">4</span> &amp;&amp; <span class="keyword">this</span>.status==<span class="number">200</span>) &#123;</span><br><span class="line">              console.log(<span class="class"><span class="keyword">type</span> <span class="title">+</span> ' <span class="keyword"><span class="keyword">with</span></span> <span class="title">XMLHttpRequest</span>:</span> ', <span class="keyword">this</span>.responseText);</span><br><span class="line">              document.getElementById(<span class="class"><span class="keyword">type</span> <span class="title">+</span> '<span class="title">-xml</span>').<span class="title">innerHTML</span> =</span> <span class="class"><span class="keyword">type</span> <span class="title">+</span> ' <span class="keyword"><span class="keyword">with</span></span> <span class="title">XMLHttpRequest</span> <span class="title">respone</span>:</span> &lt;span <span class="class"><span class="keyword">class</span>=</span><span class="string">"red"</span>&gt;' + <span class="keyword">this</span>.responseText + '&lt;/span&gt;';</span><br><span class="line">              </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          setTimeout(function() &#123;</span><br><span class="line">            xmlAjax.send(<span class="symbol">'param1</span>=value1&amp;param2=value2');</span><br><span class="line">          &#125;, sendTimeout)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      ajax(<span class="symbol">'http</span>:<span class="comment">//'+host+':3001/', 'node');</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      ajax(<span class="symbol">'http</span>:<span class="comment">//'+host+':3002/', 'django');</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>就酱，用这个静态文件访问就行。<br>运行方式： 保存为 <code>index.html</code> 然后， <code>sudo npm i -g anywhere</code> ，然后， cd 到当前目录， <code>anywhere 3003</code> 即可。就看到结果了。</p>
<h2 id="结论">结论</h2><p>Django 在处理 XDomainRequest 的 POST 请求时候确实没有正确解析。  但是 nodejs 原生的 http 服务例子能解析。 python 原生的写法没进行测试。</p>
<p>然后发现现在也有框架无法处理 XDomainRequest 的 POST 数据，例如在抓包过程中使用的 <code>livepool</code> 工具。</p>
<h2 id="测试环境">测试环境</h2><p>后端环境：</p>
<p>硬件： macbook pro retina 13<br>nodejs ： v0.12.0<br>django ： 1.8.3</p>
<p>运行环境：<br>PD 虚拟机 + WIN7 + IE 9</p>
<h2 id="源代码">源代码</h2><p><a href="https://github.com/shenqihui/lab/tree/gh-pages/test_django_post_with_xdomainrequest" target="_blank" rel="external">https://github.com/shenqihui/lab/tree/gh-pages/test_django_post_with_xdomainrequest</a></p>
<h2 id="END">END</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>Django 是一个强大的 Web 框架。<br>不过，<br>最近在处理各种跨域传输的问题，其中就遇到了一个坑： Django 服务下 IE 8、9 下面通过 XDomainRequest 无法传输数据的问题。<br>]]>
    
    </summary>
    
      <category term="XDomainRequest" scheme="http://shenqihui.github.io/tags/XDomainRequest/"/>
    
      <category term="ajax" scheme="http://shenqihui.github.io/tags/ajax/"/>
    
      <category term="corf" scheme="http://shenqihui.github.io/tags/corf/"/>
    
      <category term="django" scheme="http://shenqihui.github.io/tags/django/"/>
    
      <category term="ie" scheme="http://shenqihui.github.io/tags/ie/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript 函数劫持]]></title>
    <link href="http://shenqihui.github.io/2015/02/12/the-Italian-job-hijacked-the-javascript-function/"/>
    <id>http://shenqihui.github.io/2015/02/12/the-Italian-job-hijacked-the-javascript-function/</id>
    <published>2015-02-11T16:38:04.000Z</published>
    <updated>2015-03-12T05:51:42.000Z</updated>
    <content type="html"><![CDATA[<p>最近在搞坏事，因此总会有一些很猥琐很猥琐的想法。<br>具体有多少，只有你想不到，没有做不到。<br>这里就来讲讲如何在 js 层面，神不知鬼不觉的劫持函数。</p>
<a id="more"></a>
<h2 id="函数劫持是什么？">函数劫持是什么？</h2><p>这里所说的函数劫持，是在不改变原有功能的前提下，注入自己想要的功能。<br>改变原有功能的劫持方式简单粗暴，这里不推荐这种想法。<br>我们要做的，就是天知地知你知我知其他人不知。  </p>
<h2 id="函数劫持能干什么？">函数劫持能干什么？</h2><p>首先你得明白为什么要劫持。<br>一旦你明白了为什么要劫持，就需要找劫持点，进行函数重写劫持。<br>具体在这个重写之后的函数增加什么功能，就看你为什么要劫持了。<br>函数劫持了，你想干什么，就能干什么。</p>
<h2 id="劫持的原理">劫持的原理</h2><p>一般的劫持原理都是一个思路：<br>一、使用新的变量保存即将被劫持的函数。<br>二、改写被劫持函数的功能。<br>三、在被劫持函数的末尾段（或者其他适当部位）重新调用重写之前的函数。  </p>
<h2 id="如何进行劫持">如何进行劫持</h2><p>先来看看下面这段代码。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// save old ajax</span></span><br><span class="line">$._ajax = $.ajax;</span><br><span class="line"><span class="comment">// incase something.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noop</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 我想要加入的功能</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunctionToHack</span><span class="params">(data)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="comment">// do something you want</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// accord $.ajax to change</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxHacker</span><span class="params">(e, n)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// old success function</span></span><br><span class="line">  e._success = e.success || noop;</span><br><span class="line">  <span class="comment">// new success function of lucky money</span></span><br><span class="line">  e.success = <span class="function"><span class="keyword">function</span> <span class="title">success</span><span class="params">(data)</span> </span>&#123;</span><br><span class="line">    myFunctionToHack(data);</span><br><span class="line"></span><br><span class="line">    e._success.call(<span class="keyword">this</span>, data);</span><br><span class="line">    </span><br><span class="line">  &#125;;</span><br><span class="line">  $._ajax(e, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// change default ajax</span></span><br><span class="line">$.ajax = ajaxHacker;</span><br></pre></td></tr></table></figure>
<p>这段代码的作用估计大家都一目了然。<br>主要的功能就是重写 jquery 的 ajax 请求函数，在原生的 ajax 功能的基础上，劫持 success 回调功能。</p>
<p>具体劫持方式：</p>
<h3 id="使用新的变量保存即将被劫持的函数">使用新的变量保存即将被劫持的函数</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$.</span><span class="constant">_ajax </span>= <span class="variable">$.</span>ajax;  </span><br><span class="line">e.<span class="constant">_success </span>= e.success || noop;</span><br></pre></td></tr></table></figure>
<p>保存旧方法方便调用。</p>
<h3 id="改写被劫持函数的功能">改写被劫持函数的功能</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.ajax = ajaxHacker;</span><br><span class="line">e.success = <span class="keyword">function</span> success(data) &#123;</span><br><span class="line">  // <span class="keyword">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把 <code>jquery</code> 的 <code>ajax</code> 替换为 <code>ajaxHacker</code> 函数，实现就功能的改写。</p>
<h3 id="在被劫持函数的末尾段重新调用重写之前的函数">在被劫持函数的末尾段重新调用重写之前的函数</h3><p>为了保持功能与原来的基本一致，需要重新调用原来的函数。<br>一般情况下面都是在处理完毕自己想要的功能之后调用。这些都看个人习惯进行。<br>由于上面的代码有两个函数劫持，所以分开来讲：  </p>
<p>先看一个简单的： </p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> ajaxHacker(e, n) &#123;</span><br><span class="line">  // <span class="keyword">...</span></span><br><span class="line">  </span><br><span class="line">  $._ajax(e, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个时候，旧的 <code>jquery</code> <code>ajax</code> 功能就能在 <code>ajaxHacker</code> 执行末尾调用，<br>中途就能增加自己想要的功能了。</p>
<p>复杂点的：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">e.success = <span class="keyword">function</span> success(data) &#123;</span><br><span class="line">  // <span class="keyword">...</span></span><br><span class="line">  myFunctionToHack(data);</span><br><span class="line"></span><br><span class="line">  e._success.call(this, data);</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>success</code> 回调函数保存在 <code>e._success</code> 里面，重写了 <code>success</code> 功能之后，重新调用 <code>e._success</code>。<br>但是这个时候使用了 <code>call</code> 进行调用，原因就是避免函数运行环境 <code>this</code> 对象变化了。使用 <code>call</code> 能够确保劫持之前的运行上下文与劫持之后的运行上下文一致。<br>当然如果 <code>this</code> 对象没被使用的话，不使用 <code>call</code> 也是可以的，  </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">e</span>._success(<span class="typedef"><span class="keyword">data</span>);</span></span><br></pre></td></tr></table></figure>
<p>这样子调用，也行。</p>
<p>另外也可以使用 <code>apply</code> 代替 <code>call</code> ，两者都能操控 <code>this</code> 。</p>
<p>PS: 第二个例子，不使用 <code>call</code> 其 <code>this</code> 对象也是 <code>e</code>。因为使用了命名空间的方式进行了调用。如果不是使用 <code>e._success</code> 而是使用 <code>_success</code> 保存就函数，就必须使用 <code>call</code> 或者 <code>apply</code> 来确保运行上下文正确。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在搞坏事，因此总会有一些很猥琐很猥琐的想法。<br>具体有多少，只有你想不到，没有做不到。<br>这里就来讲讲如何在 js 层面，神不知鬼不觉的劫持函数。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git 最佳实践]]></title>
    <link href="http://shenqihui.github.io/2015/01/29/best-practices-of-git/"/>
    <id>http://shenqihui.github.io/2015/01/29/best-practices-of-git/</id>
    <published>2015-01-29T15:11:00.000Z</published>
    <updated>2015-03-12T05:50:26.000Z</updated>
    <content type="html"><![CDATA[<p>今天一个朋友在他们的 git 工作流上面遇到问题了。来询问我关于我们团队是如何使用 git 进行团队协作的。 然后我就秉着技术分享的思想给他们讲解。特意写下此文。git 这东西，用得好就是好东西。用得不好，那就只能怪你没下功夫去用了。骚年，勇敢的用起来吧。  </p>
<a id="more"></a>
<h2 id="前言">前言</h2><p>怎么使用 git， 为啥使用 git， 如何使用 git， git 和 svn 或者 hg 哪个好，就不说了，个人还是觉得 git 好。如果你觉得意见不同，来打我啊。<br>本文提到的项目是网站类型的，迭代比较快，所以一旦有功能完成就即刻发布。  </p>
<h2 id="我们的使用场景">我们的使用场景</h2><p>项目是一个网站，开发团队 n(n&gt;3)人。使用的时内部的 git 仓库。  </p>
<h2 id="仓库规范">仓库规范</h2><p>项目发起由项目组组织（organization）发起，每个项目成员进行仓库的 fork 操作，不允许 push 代码至非自己所有的远程仓库。  </p>
<h2 id="分支规范">分支规范</h2><p>每个人都进行了仓库的 fork 操作，因此每个人的仓库（下称 origin ）分支就自由发挥了。主要讲讲主仓库（下称 upstream ）的分支规范。<br>主仓库主要存在两个分支，master + dev 分支，具体名字可以随便，能理解就好。</p>
<h3 id="dev_分支的功能">dev 分支的功能</h3><p>dev 有两个功能，一个是发布到测试环境进行新功能测试，另外一个是用于团队成员进行 mr 时候使用的分支，最新功能一旦开发测试完毕，就进行 origin/branchname mr 到 upstream/dev 的操作， 分配给其他项目成员进行 review 。<br>mr 期间成员可以任意对代码进行审查评论，mr 发起人需要对评论进行回应。  </p>
<h3 id="master_分支的功能">master 分支的功能</h3><p>master 是生产环境所使用的代码，因此得确保 master 分支的代码时刻可用。如何确保，就是确保 dev 的代码能够无已知 bug 地运行了，才进行 upstream/dev mr upstream/master 的操作。dev 一旦新功能测试成功，就提 mr 至 master 分支， 分配给自己。然后自己点击 accept mr 的操作。<br>这一步操作，看似多余，但是能确保 master 分支时刻可用。</p>
<h2 id="mr_的规范">mr 的规范</h2><p>上面讲完了两个分支的作用，这是大部分仓库基本上的操作，估计很多人都清楚。<br>那如何是用这两个分支进行方便团队协作呢？这个就是一门学问了。<br>由于前面提到了， dev 和 master 只能通过 mr 方法进行代码的变动，所以，提交 mr 的时候就需要确保该 mr 能够让 git 仓库程序自动 accept（自动 accept 的意思是点击 accept 按钮就能合并代码），其他成员确定 mr accept 时候，只需点击按钮即可完成，而不是 merge this request manually 。</p>
<h2 id="团队协作踩坑大法">团队协作踩坑大法</h2><p>说一个场景很容易遇到的场景，假设项目 A 同时有 B 、 C 两个功能同时开发。不久， B 、 C 同时提了个 mr 上来。然后， B 经过 review 目测无 bug，点击了 accept ， 然后 C 也经过了 review 目测无 bug，点击了 accept 。<br>但是目测失败了，线上生产环境是非常复杂，一堆的机器、分布式数据库，超大数据量等等，造成 B 功能在模拟环境运行失败的情形。然而此时 C 功能目测无 bug 测试也无 bug ，可发布生产环境了。但是由于 B 功能出现 bug ，dev 此时就不能进行 mr 到 master 进行功能发布了。<br>C 功能急着发布，也只能看着 B 功能的成员修复此 bug 了。或者先把 B 功能从 dev 慢慢抠出来发布。但是这个是坑。</p>
<p>这里的漏洞就是 B 、 C 功能在 mr 阶段没有进行模拟生产环境测试就直接 accept 造成的。所以，就得解决这个问题。只有通过了 mr 阶段的模拟生产环境测试的 mr 才能点击 accept 进行代码合并。</p>
<h2 id="如何解决_mr_阶段测试的问题">如何解决 mr 阶段测试的问题</h2><p>说说项目的测试环境，<br>1、 用于 dev 分支代码的测试，基本上和生产环境一致，只是运行的代码不同而已。<br>2、 用于测试 mr 的测试环境，mr 测试的功能由自己控制，随便部署，每个提交 mr 的所有者需要部署 mr 环境给其他 review 代码的成员进行测试使用。在确保代码质量的同时，也确保了由于开发环境跟生产环境差异造成的代码缺陷。</p>
<h2 id="团队协助规范">团队协助规范</h2><ol>
<li>禁止 push 代码至非 origin 仓库  </li>
<li>使用 fetch + rebase 代替 pull + merge 更新其他成员最新的代码，不予许使用 pull + merge  </li>
<li>upstream 只能通过 mr 方式进行代码合并请求  </li>
<li>功能 mr 必须 asign 给非自己进行代码审查  </li>
</ol>
<hr>
<p>我要开始讲故事了</p>
<hr>
<h2 id="如何进行团队的协助">如何进行团队的协助</h2><p>以场景进行讲解吧。</p>
<h3 id="需求订立">需求订立</h3><p>开发的功能都商量好了，产品狗可以一边玩去。项目起了个响当当的名字，叫做古猫搜索引擎，小明（git id ming） 和 小花（git id hua，女的打字工哦） 再加几个打酱油的打字工进行开发。</p>
<h3 id="创建仓库">创建仓库</h3><p>他们创建了个组织叫古猫组织（git id goocat），然后创建了个 goocat 仓库，设置主分支为 dev ，master 留着暂时不管，push 个 相同的 init 到 dev 和 master ，然后把小明和小花还有几个打酱油的设置为管理员权限。仓库就这样子弄上来了。 .gitignore 、 WTFPL 什么的，也在这个时候加上去。  </p>
<h3 id="打字工出场">打字工出场</h3><p>这个时候，产品狗的什么，已经为了避免冲突，被送去某个小黑屋好好呆着了。<br>其他打酱油的被分配开发数据库什么的了。<br>小明和小花就马上动手写代码开发 index 页面，自己动手，丰衣足食。马上 fork 仓库， git clone 、 git remote add 什么一气呵成， add 了 upstream 和其他项目组成员的仓库地址。<br>小明用上了打 dota 的 apm ，瞬间把后台功能完成了， push origin api 完成，接下来等妹子小花来补充前端开发了。小花真羡慕打 dota 的人的 apm 能这么高，用来写代码瞬间就写完了。<br>但是小明完成的功能只是整个功能的一半，需要小花继续进行，所以小花第一步就是更新小明的代码下来<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v </span><br><span class="line">git remote add ming git@**<span class="class">.com</span>:ming/goocat<span class="class">.git</span></span><br><span class="line">git fetch ming </span><br><span class="line">git checkout -<span class="tag">b</span> page </span><br><span class="line">git rebase -<span class="tag">i</span> ming/api</span><br></pre></td></tr></table></figure></p>
<p>然后根据提示把 rebase 进行到底。这样子就能获取小明最新的代码了。</p>
<p>小花技术也杠杠的，瞬间接上了小明的几个 api。</p>
<h3 id="需求变动">需求变动</h3><p>到了某个 api 的时候，发现页面展示效果其实没那么好，这个时候召唤产品狗和小明过来。</p>
<p>他们间对话</p>
<blockquote>
<p>小花：这个功能我要这样这样这样，这样才是最好的交互效果。<br>小明这个时候使劲点头，手里的也不停下，拿着犀牛书在看。也能够在跟产品狗起争执时候一书拍过去，屡试不爽好吗，那个产品狗都被吓怕了。<br>产品狗看了下小明的犀牛书，擦了下汗：这个想法非常好，就这么实现了</p>
</blockquote>
<p>就这样子，没啥废话，需求就这样变吧。</p>
<h3 id="多人协作">多人协作</h3><p>需求变动了，api 继续变下，小花女神交代小明改改api，我的分支是 apge ，小明刷刷刷几下就马上动手改了。</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git checkout api</span><br><span class="line">git status</span><br><span class="line">git remote -v</span><br><span class="line">git remote add nvshen git<span class="comment">@**.com:hua/goocat.git</span></span><br><span class="line">git fetch nvshen</span><br><span class="line">git stash</span><br><span class="line">git rebase -i nvshen/page</span><br><span class="line"><span class="comment"># 坐等 git rebase 完成</span></span><br><span class="line">git stash pop</span><br><span class="line">vim <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.py</span><br><span class="line">vim api.md</span><br><span class="line"><span class="comment"># 编辑完毕代码</span></span><br><span class="line">git add <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>.py api.md</span><br><span class="line">git commit -m '根据女神说的需求改动，进行 古猫搜索部分 api 改动'</span><br><span class="line">git push origin api</span><br></pre></td></tr></table></figure>
<p>然后跑过女神那里说： 小花，改动完了，你 fetch 下来看看呗。<br>小花有开始了这个功能代码的编写，获取小明最新的代码：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git stash </span><br><span class="line">git fetch ming</span><br><span class="line">git <span class="keyword">push</span> origin page</span><br><span class="line">git rebase -i ming/api</span><br><span class="line">git stash <span class="keyword">pop</span></span><br></pre></td></tr></table></figure></p>
<p>然后继续进行代码的开发，编写完毕果断使用 github 客户端进行代码的 commit，不错不错，功能 done 。提交仓库给小明吧。<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">push</span> origin page</span><br><span class="line"><span class="preprocessor"># 打印了一堆的冲突的信息</span></span><br><span class="line">git <span class="keyword">push</span> -f origin page</span><br></pre></td></tr></table></figure></p>
<p>然后到线上仓库看看时候提交成功了，看看 commit ，看到了之前小明的 commit </p>
<blockquote>
<p>‘根据女神说的需求改动，进行 古猫搜索部分 api 改动’</p>
</blockquote>
<p>然后小花又叹气了</p>
<blockquote>
<p>这小明，老是这样子，一点勇气都没有。</p>
</blockquote>
<p>然后在微信朋友圈发了条 Text ： 你主动一点，我们之间就会有故事。<br>然后告知小明前端开发完毕了，提 mr 测试吧。</p>
<h3 id="mr_操作">mr 操作</h3><p>这个时候小明就开始提 mr 了<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch nvshen</span><br><span class="line">git <span class="keyword">push</span> origin api</span><br><span class="line">git rebase -i nvshen/page</span><br><span class="line">git <span class="keyword">push</span> -f origin api</span><br></pre></td></tr></table></figure></p>
<p>上仓库进行 mr 了，提交了个 mr ，指向给了某一个打酱油的打字工 A 进行 review ，看到写着不能自动 accept，原来其他几个打酱油的已经把部分功能提交并且 accept 了，而且代码有冲突，这个时候小明就要做成没冲突了。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch upstream</span><br><span class="line">git rebase -<span class="tag">i</span> upstream/dev</span><br><span class="line">git push -f origin api</span><br></pre></td></tr></table></figure></p>
<p>回 upstream 仓库看看，不错，能自动 accept 了。</p>
<h3 id="review_&amp;&amp;_accept">review &amp;&amp; accept</h3><p>打酱油 A 提了部分意见，小明都一一做了改动。最后 mr 环境测试成功了， accept ，发布到 dev 环境， 也成功，上线，古猫搜索引擎 demo 版本出来了。<br>v0.1.0 实现了。</p>
<h3 id="打版本了">打版本了</h3><p>产品狗一阵激动，终于实现了小部分了。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone git@**<span class="class">.com</span>:goocat:goocat<span class="class">.git</span></span><br><span class="line">git checkout dev</span><br><span class="line">git tag v0.<span class="number">1.0</span></span><br><span class="line">git push origin --tag</span><br></pre></td></tr></table></figure></p>
<p>奔走相告，今晚大家唱歌庆祝。白天鹅 KTV 唱 K。</p>
<h3 id="庆功会">庆功会</h3><p>小花点了一首歌： she 的 《恋人未满》，申请的唱出来了，眼睛还冒着泪花，时不时还望了望小明。</p>
<p>故事唱完了，小花很伤心：</p>
<blockquote>
<p>那小明怎么能这样子，一点都不主动。  </p>
</blockquote>
<p>然后喝了很多酒。结果醉了，领导说：</p>
<blockquote>
<p>小明，公司里面你和小花关系最好了，今晚你负责送她回家啦。  </p>
</blockquote>
<p>小明呆呆的望着女神去了。</p>
<p>散场了，小明扶着小花上了出租车，送小花回家，然后就没有然后了。<br>这是个悲伤的故事。</p>
<hr>
<p>故事讲完了，大家洗洗睡吧。</p>
<hr>
<h2 id="科普下上面提到的名词">科普下上面提到的名词</h2><p>upstream : 上层仓库<br>origin : 当前所有者的仓库<br>master : 生产代码主分支<br>dev : 开发代码主分支<br>merge : 合并代码<br>mr : merge request, 合并代码请求<br>accept : 接受代码合并请求<br>review : 队友对你的代码进行审查<br>bug : 八阿哥<br><del>以下的词我解析不了，有很多东西中文是没法解析的，自己理解</del><br>git : 词典释义为饭桶，无用的人 →_→<br>organization : 相对于成员，它就是组织<br>fork : 词典释义为叉子<br>clone : 克隆</p>
<h2 id="彩蛋">彩蛋</h2><p>看到这里，也挺艰难的，其实 dev 测试环境可以去掉不用。<br>至于其他的不同的方法，欢迎评论指导。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天一个朋友在他们的 git 工作流上面遇到问题了。来询问我关于我们团队是如何使用 git 进行团队协作的。 然后我就秉着技术分享的思想给他们讲解。特意写下此文。git 这东西，用得好就是好东西。用得不好，那就只能怪你没下功夫去用了。骚年，勇敢的用起来吧。  </p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[XSRF测试题]]></title>
    <link href="http://shenqihui.github.io/2015/01/17/XSRF/"/>
    <id>http://shenqihui.github.io/2015/01/17/XSRF/</id>
    <published>2015-01-16T16:38:04.000Z</published>
    <updated>2015-03-12T05:49:13.000Z</updated>
    <content type="html"><![CDATA[<p>这个是一个测试 xsrf 的测试题，具体实现思想可能猥琐。看看谁能想到和我一样猥琐的方案。</p>
<a id="more"></a>
<h1 id="网络环境">网络环境</h1><p>现在的场景是A站点和B站点，假设A站是新浪，B站是我们控制的站，<br>所以B站的后端代码随便该。A站的话，参考新浪主页。</p>
<hr>
<h1 id="想干啥">想干啥</h1><p>我们发现了个新浪主页的XSS漏洞，就是能注入我们的 script 进去，用户打开特定网址后，就运行我们的 script ，我们就能获取一堆信息，现在想把信息发送回来。信息可能非常非常的大，大于 GET 方式能处理的长度。   </p>
<hr>
<h1 id="B站的环境">B站的环境</h1><p>目前已经有一个 get 和 post 方式共用的 api。<br>例如 get 方式的，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">"api.html"</span>, &#123; name: <span class="string">"John"</span>&#125; );</span><br></pre></td></tr></table></figure></p>
<p>或者 post 方式的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">"api.html"</span>, &#123; name: <span class="string">"John"</span>&#125; );</span><br></pre></td></tr></table></figure></p>
<p>然后这两种方式，任意一中，就能把 { name: “John”} 这个信息发送回 B站 进行存储了。<br>B站已经进行了任何的跨域请求，例如 Access-Control-Allow-Origin， p3p等等。</p>
<hr>
<h1 id="A站的环境">A站的环境</h1><p>A站环境未知，也可以说是任意，但是我们有办法在 A站 的页面注入我们的 script</p>
<hr>
<h1 id="不能使用的解决方式">不能使用的解决方式</h1><p>不能使用 flash </p>
<hr>
<h1 id="任务：要做什么">任务：要做什么</h1><p>任务1，不改变现有接口的前提下，实现</p>
<ol>
<li>解决 chrome 现代浏览器该怎么发送数据。</li>
<li>解决了 上面的，那就开始解决 低版本 IE 了。要求兼容 IE6 ，比较变态，但是这个业务不能忽略 IE6 等。（用代码体现）<br>提示：跨域，HTTP状态，实现方式能多猥琐就多猥琐。</li>
</ol>
<p>任务二，躺床上，想一种更好的方法，也不能用 flash。不用写代码，说说思路，这个时候能任意改 B站 API。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这个是一个测试 xsrf 的测试题，具体实现思想可能猥琐。看看谁能想到和我一样猥琐的方案。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[自己收集的一堆开发有用的网址]]></title>
    <link href="http://shenqihui.github.io/2014/11/04/%E8%87%AA%E5%B7%B1%E6%94%B6%E9%9B%86%E7%9A%84%E4%B8%80%E5%A0%86%E5%BC%80%E5%8F%91%E6%9C%89%E7%94%A8%E7%9A%84%E7%BD%91%E5%9D%80/"/>
    <id>http://shenqihui.github.io/2014/11/04/自己收集的一堆开发有用的网址/</id>
    <published>2014-11-03T19:36:00.000Z</published>
    <updated>2015-02-15T15:41:34.000Z</updated>
    <content type="html"><![CDATA[<p>1、查看 ip、ua 以及&nbsp;X Forwarded For，来自v2的，平常识别下自己的机器信息。&nbsp;<a href="http://www.v2ex.com/ua" target="_blank" rel="external">http://www.v2ex.com/ua</a><br><a id="more"></a><br>&nbsp;</p>
<p>2、楼下补充</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>1、查看 ip、ua 以及&nbsp;X Forwarded For，来自v2的，平常识别下自己的机器信息。&nbsp;<a href="http://www.v2ex.com/ua">http://www.v2ex.com/ua</a><br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[支付宝么么哒]]></title>
    <link href="http://shenqihui.github.io/2014/10/30/%E6%94%AF%E4%BB%98%E5%AE%9D%E4%B9%88%E4%B9%88%E5%93%92/"/>
    <id>http://shenqihui.github.io/2014/10/30/支付宝么么哒/</id>
    <published>2014-10-29T20:44:00.000Z</published>
    <updated>2015-02-15T15:41:34.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://images.cnitblog.com/blog/358891/201410/301244088943397.png" alt=""></p>
<p>么么哒。<br><a id="more"></a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://images.cnitblog.com/blog/358891/201410/301244088943397.png" alt=""></p>
<p>么么哒。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[js页码生成库，一个适合前后端分离的页码生成器]]></title>
    <link href="http://shenqihui.github.io/2014/07/13/js%E9%A1%B5%E7%A0%81%E7%94%9F%E6%88%90%E5%BA%93%EF%BC%8C%E4%B8%80%E4%B8%AA%E9%80%82%E5%90%88%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E9%A1%B5%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>http://shenqihui.github.io/2014/07/13/js页码生成库，一个适合前后端分离的页码生成器/</id>
    <published>2014-07-13T01:50:00.000Z</published>
    <updated>2015-05-12T15:40:51.000Z</updated>
    <content type="html"><![CDATA[<p><strong>前言</strong></p>
<p>上星期写的任务里面有需要进行分页的处理，git搜索了一番，没有觉得合适的，于是自己临时写了个分页的算法。</p>
<p>然后等闲下来的时候，决定把分页进行优化并推广。于是乎，一个适合前后端分离的页码生成器就这样出来了。<br><a id="more"></a><br>先别废话了，直接上 <a href="https://github.com/shenqihui/pagination" target="_blank" rel="external">git 地址</a> 和 <a href="http://shenqihui.github.io/pagination/" target="_blank" rel="external">demo 地址</a>。看官果断点击进去瞧瞧看。项目主页的 readme 文档的自动排版将更好。</p>
<p><strong>先讲讲设计思想</strong></p>
<p>整个开发流程围绕事件绑定进行开发。</p>
<p>脱离 callback 回调这种回调方法，直接使用 事件 方式触发换页前后的动作，方便解耦。</p>
<p>既然使用这种方式进行回调，就使用全局变量挂载分页的数据，方便回调时候进行分页数据的访问。</p>
<p><strong>库的依赖</strong></p>
<p>由于开发库的时候，并没有使用原生的语法进行元素或者事件绑定的操作，因此需要依赖某个库。</p>
<p>现阶段，经过测试支持 zepto 以及 jquery （二选一）。</p>
<p>css 方面，建议还是直接自己写或者使用 bootstrap 的库，源代码里面有从 bootstrap 里面抽出来的分页 css 代码。</p>
<p><strong>简洁demo</strong></p>
<p>由于分页就必须知道分页数据大小，因此必须传输配置对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pageConfig = &#123;</span><br><span class="line">  <span class="comment">// 每页显示的数据长度，必填，而且 &gt;1</span></span><br><span class="line">  prePageLenght: <span class="number">10</span>,</span><br><span class="line">  <span class="comment">// 数据的总长度，必填，而且 &gt;1</span></span><br><span class="line">  dataLength: <span class="number">30</span>,</span><br><span class="line">  <span class="comment">// 现在的页码，默认 1</span></span><br><span class="line">  pageNow: <span class="number">1</span>,</span><br><span class="line">  <span class="comment">// 渲染分页 html 的容器，一般框架的容器即可</span></span><br><span class="line">  renderBox: $(<span class="string">'.pagination-box'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>配置之后，进行调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运行即可分页</span></span><br><span class="line">pageBuilder(pageConfig);</span><br></pre></td></tr></table></figure>
<p>这样子就能进行分页了。</p>
<p><strong>回调的书写</strong></p>
<p>回调的书写虽然放在了调用分页的主函数后面，但是记得在调用分页之前就定义这些事件，因为一旦调用分页函数，就马上触发分页回调，写在后面了，就会忘记了刚分页时候的事件回调了。</p>
<p>首先是分页前的回调，分页之前会触发 window 下面一个自定义分页之前的事件&nbsp;<span class="s1">beforePageChange ，因此要触发处理分页前的动作，就这样处理：</span></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提前定义好分页之前的动作，可选</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'beforePageChange'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// callback</span></span><br><span class="line">  <span class="comment">// todo</span></span><br><span class="line">  <span class="comment">// 获取当前页码，可以从 pageBuilder.page.pageNow 取得，注意此时的值为未分页之前的旧页码。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>同样道理，分页之后的回调差不多：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提前定义好分页之后的动作，可选</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'afterPageChange'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// callback</span></span><br><span class="line">  <span class="comment">// todo</span></span><br><span class="line">  <span class="comment">// 获取当前页码，可以从 pageBuilder.page.pageNow 取得</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>特别说明</strong></p>
<p>一个页面只适合使用一个分页实例。分页的动作将在 hashchange 触发之后进行分页。</p>
<p>里面监控页码变化的函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定换页的事件</span></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'hashchange'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash = location.hash;</span><br><span class="line">  <span class="keyword">var</span> pageTemp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^#page=\d+$/</span>.test(hash) === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 直接是页码的</span></span><br><span class="line">    pageTemp = hash.substring(<span class="number">6</span>) | <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (defaultConfig.pageNow !== pageTemp) &#123;</span><br><span class="line">      defaultConfig.pageNow = pageTemp;</span><br><span class="line">      $(<span class="built_in">window</span>).trigger(<span class="string">"renderPagination"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hash === <span class="string">"#page=next"</span>) &#123;</span><br><span class="line">    <span class="comment">// 下一页的</span></span><br><span class="line">    location.hash = <span class="string">"page="</span> + ( defaultConfig.pageNow + <span class="number">1</span> );</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hash === <span class="string">"#page=prev"</span>) &#123;</span><br><span class="line">    <span class="comment">// 上一页的</span></span><br><span class="line">    location.hash = <span class="string">"page="</span> + ( defaultConfig.pageNow - <span class="number">1</span> );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>因为 hashchange 只支持 IE8+，</p>
<p>所以，该插件只适合 IE8+，甚至IE8的怪异模式不支持 hashchange 事件。</p>
<p><strong>结束语</strong></p>
<p>这个库还有很多可以优化的地方，例如页码缓存，还有作用域优化之类的，还没进行优化。</p>
<p>希望大家喜欢。喜欢的话，点个推荐吧，如果使用上了，记得 star 下哦。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>前言</strong></p>
<p>上星期写的任务里面有需要进行分页的处理，git搜索了一番，没有觉得合适的，于是自己临时写了个分页的算法。</p>
<p>然后等闲下来的时候，决定把分页进行优化并推广。于是乎，一个适合前后端分离的页码生成器就这样出来了。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[任何一个团队，永远不会像你想象中的那么好，也不会如你所听说的那么糟。]]></title>
    <link href="http://shenqihui.github.io/2014/02/28/%E4%BB%BB%E4%BD%95%E4%B8%80%E4%B8%AA%E5%9B%A2%E9%98%9F%EF%BC%8C%E6%B0%B8%E8%BF%9C%E4%B8%8D%E4%BC%9A%E5%83%8F%E4%BD%A0%E6%83%B3%E8%B1%A1%E4%B8%AD%E7%9A%84%E9%82%A3%E4%B9%88%E5%A5%BD%EF%BC%8C%E4%B9%9F%E4%B8%8D%E4%BC%9A%E5%A6%82%E4%BD%A0%E6%89%80%E5%90%AC%E8%AF%B4%E7%9A%84%E9%82%A3%E4%B9%88%E7%B3%9F%E3%80%82/"/>
    <id>http://shenqihui.github.io/2014/02/28/任何一个团队，永远不会像你想象中的那么好，也不会如你所听说的那么糟。/</id>
    <published>2014-02-27T19:35:00.000Z</published>
    <updated>2015-02-15T15:41:34.000Z</updated>
    <content type="html"><![CDATA[<p>标题这句话是玉伯说的。<br><a id="more"></a><br>&nbsp;</p>
<p><strong>缘由：</strong></p>
<p>看了这个问题：<span><a href="http://www.zhihu.com/question/20084964" target="_blank" rel="external">淘宝 UED 前端、腾讯脚本开发、豆瓣前端开发，应该如何在这几个工作之间选择？</a>&nbsp;，有自己</span>的感受。</p>
<p>&nbsp;</p>
<p><strong>背景：</strong></p>
<p>三天前，也就是 2014 年 02 月 25 日，我向领导提交了辞职申请表，裸辞。辞职的理由是：追求专注于互联网的团队。</p>
<p>领导看完申请表之后，马上过来问我什么情况，我的回答：想换个专注于互联网的环境。</p>
<p>昨天 ( 2014 年 02 月 27 日 ) 领导和我详细谈了下，确定在 2014 年 03 月 14 日&nbsp;(2014年3月4日注：离职提前到了20140304)。最近都在做交接工作和做一些补充性的功能之后发给接手的同事。</p>
<p>离职时间已定，我在公司的时间不算长，20130301-20140314，一年多一点点，毕业后的第一份正式工作。(2014年3月4日注：离职提前到了20140304)</p>
<p>在公司 ( 某大屏幕制造方向的公司 ) 期间，参与了公司的一个大项目的三大模块，公司的专职前端开发工程师只有两个，因此我算是负责这个大项目的主前端了。项目的架构师前端知识也很牛 ( CSS，响应式设计除外 ) ，所以我主要 协助架构师进行JS架构 和 进行多皮肤多终端下面的响应式CSS框架的架构。对自己的CSS长进还是很足的，另外也使用工厂模式开发了一个地图控件库，三个视频控件库 ( 差不多一样功能 ) 。&nbsp;</p>
<p>当团队和部门的同事知道我要辞职的消息之后，都会问我一个这样子的问题：</p>
<blockquote>
<p>同事：怎么突然间辞职了，找到下一家了没有？</p>
<p>我：想换个环境吧，裸辞。</p>
<p>同事：这么傻，干嘛不等到找到了再辞职？</p>
</blockquote>
<p>&nbsp;</p>
<p><strong>裸辞原因：</strong></p>
<p>至于这个 &ldquo;为什么要裸辞？&rdquo; 这个原因，我觉得没什么原因吧。</p>
<p>主要是大家的观念都是骑驴找马、没有足够的勇气裸辞、怕裸辞之后没能快速找到工作，而我的观念是裸辞、有勇气、花时间下去找好工作。这个就是为什么裸辞的原因。</p>
<p>辞职了之后，我有时候晚上会想想，如果工作找不到怎么办？那就只能逼自己学习拥有更牛的技术，让别人希望你加入他们团队。</p>
<p>&nbsp;</p>
<p><strong>离职原因：</strong></p>
<p><span style="line-height: 1.5;">上面提到我回答领导问题的答案是：想换个专注于互联网的环境。</span></p>
<p>看到知乎上面 <a href="http://www.zhihu.com/people/sofish" target="_blank" rel="external">@sofish</a>&nbsp;的回答中的一句话 ：</p>
<blockquote>
<p>我爸爸常告诉我，不要轻易离职，只有当你呆足够久了才可能知道是这个团队不适合你，还是你没有适应这个团队 <a href="http://www.zhihu.com/question/20084964" target="_blank" rel="external">撮这里看原答案</a></p>
</blockquote>
<p><span>此时我清楚的明白到，这个团队不适合我。我想做互联网的项目，针对的是普通大众，而不是特定的人群 ( 现在所做项目受众就是特定的人群 ) 。</span></p>
<p><span>而且我不希望搞 jsp 开发。在现在的团队里面，使用了 Lifray 的框架，开发出来的页面对我来说，都觉得是不可控的，总觉得不踏实。</span></p>
<p><span>我喜欢的是 php/python ，当然如果是直接使用 api 的话根本不用管后台用什么语言进行开发。</span></p>
<p><span>另外， Liferay 的启动是在太慢了，而且框架自带的 UI 太庞大，扔个原版 bootstrap 3.0 进去都会造成不兼容。</span></p>
<p><span>还有一个很重要的原因：<strong>太闲了，基本不用加班，而且项目过度阶段能闲上1个月不用写代码。</strong>这是一个致命的原因，对于一个刚毕业的技术菜鸟来说，适当繁重的工作任务对技能的提升有非常大的帮助。现阶段我更希望到有加班氛围的公司。<br></span></p>
<p><span>有人说那为什么你当初加入这个团队，这个只能怪自己在毕业的时候，没能力选择更好的企业，老师说：&ldquo;先就业后择业&rdquo;。</span></p>
<p><span>当时有一个创业团队，一直在实习，可以毕业之后留下来，做电子商务网站的。而我选择了现在这个大屏幕制造的股份公司，稳定，福利好，大公司。</span></p>
<p>&nbsp;</p>
<p><strong>为啥现在离职：</strong></p>
<p><span>当然，年终奖是一个诱惑。</span></p>
<p><span>1月多，参与的项目算是初步做完，不用中途退出给别人留个烂摊子，都快到年了，拿了年终奖再走吧。</span></p>
<p>&nbsp;</p>
<p><strong>我所希望的团队：</strong></p>
<p><span>在我的理念了，最好的前后端开发方式是：前端单纯写 html ，通过各种 api 与后台进行交互。这个也是大部分前端开发工程师觉得最可操控的一种模式吧。</span></p>
<p><span>但是现实往往不是这样，例如数据展现是直接一个 php 或者 jsp 生成一段 html 代码的方式。</span></p>
<p><span>代码管理最好使用 git ，这样就能尽量避免队友在无意间提交的失误造成 bug ，能针对性的审查代码。当然 svn 也行，需要在更新的时候进行所有更新的代码的审查。</span></p>
<p><span>团队成员为了产品，乐意加班，乐意奉献，一个团队不为别的，就为了自己的产品能做好，越快完成越好。</span></p>
<p>&nbsp;</p>
<p><strong>任何一个团队，永远不会像你想象中的那么好，也不会如你所听说的那么糟。</strong></p>
<p><span style="line-height: 1.5;">在一个团队里，如果你觉得团队太糟了，原因只有两个：1、这个团队不适合你。2、你没适应这个团队。不然，这个团队早就瓦解了。</span></p>
<p><span style="line-height: 1.5;">上至团队老大，下至团队最小能力最差的码农，都有自己的在团队里面的一席之地，要么就是技术能力上的增长，要么就是管理能力上的增长。</span></p>
<p><span style="line-height: 1.5;">可能你在寻找工作的时候，看到团队的描述是多么的美好，结果加入了却发现某些问题，这个不可避免，毕竟在想象里面的东西可以使完美的。</span></p>
<p><span style="line-height: 1.5;">发现不完善的东西，你可以努力尝试改变它，如果不可改变，那就一定是有存在的道理，例如为啥微信还在用 svn 进行代码管理：因为 svn 通用，稳定，很多人擅长；项目开始的时候没考虑那么多，使用了，改动不过来。等等。</span></p>
<p>&nbsp;</p>
<p>扯淡结束了，突然间觉得自己的全文跟标题有一点点跑偏的感觉。</p>
<p>&nbsp;</p>
<p><strong>卖一下广告，求职：</strong></p>
<p>离职了，处于交接阶段，当然得着手找工作，我也在投简历中。</p>
<p>如果有团队希望接纳我，请考虑下我，猛戳 <a href="http://shenqihui.github.io/lab/resume/" target="_blank" rel="external">我的简历</a>&nbsp;，简历一直在修改。昨天看到了 <a href="http://yuguo.us/" target="_blank" rel="external">余果</a>&nbsp;的简历，觉得我们间距居然那么大 T_T 。不过嘛，人家工作那么久了，差距<span style="line-height: 1.5;">肯定有。</span></p>
<p>如果是大牛，根本不用简历。例如传说中 <a href="http://zh.wikipedia.org/zh-cn/%E5%90%89%E5%A4%9A%C2%B7%E8%8C%83%E7%BD%97%E8%8B%8F%E5%A7%86" target="_blank" rel="external"><span>Guido</span></a>&nbsp;去面试 google 的时候的简介描述就一句话：T WROTE PYTHON. &nbsp;当然，我还没那么牛，现在还是一个小菜鸟。T_T</p>
<p>也说说我的期望吧：</p>
<p>1、地点：暂时只考虑广州。</p>
<p>2、团队方向：（移动）互联网方向，产品受众面广。</p>
<p>3、不写 JSP。因为不太懂。T_T。</p>
<p>4、职位：前端开发 / 页面重构。</p>
<p>&nbsp;</p>
<p>谢谢看这一篇扯淡，如果觉得你赞同其中的某个观点，点个赞吧。^_^</p>
<p>更新信息一：2014年3月3日</p>
<p>offer已经收到，是位于珠江新城附近的一个移动互联网公司，虽然福利没有之前公司好，但是，估计在这个公司能学到更牛的技术。</p>
<p>昨天跟朋友说：五年后，我要成为一个：找工作时，开价年薪30w，别人还抢着要我的牛人。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>标题这句话是玉伯说的。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[探讨javascript面向对象编程]]></title>
    <link href="http://shenqihui.github.io/2014/02/12/%E6%8E%A2%E8%AE%A8javascript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>http://shenqihui.github.io/2014/02/12/探讨javascript面向对象编程/</id>
    <published>2014-02-11T21:58:00.000Z</published>
    <updated>2015-05-12T15:50:20.000Z</updated>
    <content type="html"><![CDATA[<p><strong>前言：</strong></p>
<p>下面将探讨 javascript 面向对象编程的知识。</p>
<p>请不要刻意把 javascript 想成面向对象编程是理所当然的。<br><a id="more"></a><br>javascript 里面，对象思想不可少，但是不一定需要面向对象编程，有时候，我们需要的只是一个实例化了的对象，而不是一个创建对象的类。</p>
<p>偏要这样做的话，也行，请看下文。另外请勿与传统面向对象编程做对比，这没有可比性。</p>
<p>对于 javascript 来说，所有的变量都可以被称为对象。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.toUpperCase());</span><br></pre></td></tr></table></figure>
<p>这里面，a为字符串对象。有其能直接调用的方法。但是这篇文章不讨论这一类的变量，而是讨论如何自定义对象。</p>
<p><strong>声明一个对象：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure>
<p>通过上面这两种方式中任意一种，就就声明了一个对象变量，这是一个实例，而且，是一个空对象,不能继承。</p>
<p>何为空对象，就是这个对象里面没有定义任何成员和方法。</p>
<p><strong>设置对象成员和方法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = &#123;&#125;;</span><br><span class="line">Person.name = <span class="string">'Tom'</span>;</span><br><span class="line">Person.gender = <span class="string">'male'</span>;</span><br><span class="line">Person.sayHello = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello "</span>+<span class="keyword">this</span>.name+<span class="string">"."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一种最直观最简单的对象定义及成员方法添加的方法，里面定义了 person 对象，person 有 name 和 gender 的成员，以及 sayHello 的方法。这也是一个实例，不能继承。通过 person.name/persion.gender 能直接引用该对象的成员，person.sayHello() 能直接调用该对象的方法。这算基础。</p>
<p>在 sayHello 方法中，this 指向的就是 person，和其他的面向对象编程方法相同。</p>
<p>上面声明对象的方法太过于累赘，一般选择下面这种对象声明的方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = &#123;</span><br><span class="line">  name:<span class="string">'Tom'</span>,</span><br><span class="line">  gender:<span class="string">'male'</span>,</span><br><span class="line">  sayHello:<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello "</span>+<span class="keyword">this</span>.name+<span class="string">"."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的声明方法比上面的方法都简洁，首推方法。成员方法调用方式一样。</p>
<p><strong>声明一个可继承的类：</strong></p>
<p><strong>情景一：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'NoName'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Person.sayHello = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello "</span>+<span class="keyword">this</span>.name+<span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Tom = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure>
<p>这样子，就等于声明了一个 person 的类，Tom 就是 person 的一个实例。但是 person.sayHello 方法就等于是私有属性，不能被继承，所有 Tom 没有 sayHello 的方法。</p>
<p><strong>情景二：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name||<span class="string">"NoName"</span>;</span><br><span class="line">  <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello "</span>+<span class="keyword">this</span>.name+<span class="string">"."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> Tom = <span class="keyword">new</span> Person(<span class="string">'Tom'</span>);</span><br><span class="line">Tom.sayHello();</span><br></pre></td></tr></table></figure>
<p>这样也是定义对象的一个方法，person 是一个类，其 name 和 sayHello 可被实例继承。但是有一个缺陷，如果通过此类创建多个实例，那么这个类就存在多少份的复制，就如上面来说，创建多个实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Tom1 = <span class="keyword">new</span> Person(<span class="string">"Tom1"</span>);</span><br><span class="line"><span class="keyword">var</span> Tom2 = <span class="keyword">new</span> Person(<span class="string">"Tom2"</span>);</span><br><span class="line"><span class="keyword">var</span> Tom3 = <span class="keyword">new</span> Person(<span class="string">"Tom3"</span>);</span><br></pre></td></tr></table></figure>
<p>此时，Person 就存在三个实例，每个实例有自己的成员和方法，内存中有三个 sayHello 方法的引用。sayHello 作为一个通用的方法，这样定义的话，在新建多个实例时，就会造成内存的浪费。因此，应该把通用的方法使用原型链的方式定义，请看情景三。</p>
<p><strong>情景三：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name||<span class="string">"NoName"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello "</span>+<span class="keyword">this</span>.name+<span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Tom = <span class="keyword">new</span> Person(<span class="string">'Tom'</span>);</span><br><span class="line">Tom.sayHello();</span><br></pre></td></tr></table></figure>
<p>通过原型链的方式，基于这个类新建的实例，其方法就不会再内存里面存在多个实例。</p>
<p>但是此时，又涉及一个问题，如何知道 Tom 属于哪个类的呢，通过哪个构造函数来创建的呢？就引申到情景四了。</p>
<p><strong>情景四：</strong></p>
<p>这里，讨论的是实例的构造函数，每一个对象都有一个 construcor 的成员方法，指向的是创建该对象的那个函数。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; <span class="comment">//此时arr1.constructor就是Array。</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;<span class="comment">//此时func.constructor就是Function。</span></span><br></pre></td></tr></table></figure>
<p>因此，情景三中的 Tom.constructor 就是 Person，就是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name||<span class="string">"NoName"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这一个函数。通过 new 运算符创建的实例，该实例成员 constructor 所指向的就是 new 后面的变量。</p>
<p>题外话，说说 new 运算符，MDN 上面<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="external">关于new运算符的定义</a>是这样的：</p>
<blockquote>
<p>The new operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function.</p>
</blockquote>
<p>大意是：new 运算符能为那些存在构造函数的用户自定义对象类型或者浏览器内部实现对象类型创建一个实例。</p>
<p>new的语法格式为</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> constructor[([<span class="built_in">arguments</span>])];</span><br></pre></td></tr></table></figure>
<p>可以明显看出 实例的成员 constructor 就是创建该实例的对象类型。</p>
<p>上面的四个情景，都不能说是面向对象编程，因为，还没有实现类的继承，只实现了类的创建实例。下面情景五来探讨如何继承类。</p>
<p><strong>情景五：</strong></p>
<p>不推荐用原生的写法进行面向对象编程，因为确实非常麻烦，推荐使用 coffeescript 进行面向对象的编程，甚至所有的 javascript 的编写，能转 coffeescript 就全部转，你会发现，使用 coffeescript 写出来的代码非常的优雅，而且，你将全部精力投入的是如何巧妙的设计代码，而不是堆代码的时代。</p>
<p>当然，这里还是会讲讲如何通过原生 javascript 的方式实现 javascript 的继承。不过，真的很麻烦。</p>
<p>首先，得要一个 extends，把它看成 new 级别的东西吧。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __extends = <span class="function"><span class="keyword">function</span><span class="params">(child,father)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> property <span class="keyword">in</span> father) &#123;</span><br><span class="line">    child[property] = father[property];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Animal = <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Animal.sayHello = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello "</span>+<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Cat = <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">__extends(Cat,Animal);</span><br><span class="line">Cat.sayHello();</span><br></pre></td></tr></table></figure>
<p>这是一种继承的方式，要完美实现，这还是不足的。代码量好大啊。还是使用 coffeescript 来写吧。</p>
<p><strong>情景六：</strong></p>
<p>在情景五中，Cat 继承了 Animal 的 sayHello 的方法。但是，如果改成 Animal.prototype.sayHello = function () {} 的话，Cat 类就没法继承了，这就是上面那种简单写法的缺陷。</p>
<p>所以需要把 prototype 的属性也要继承，所以必须把 __extends 函数重新写，注意 prototype 对于所有其派生类都是指向同一个内存空间的，修改父类对象的 prototype 将影响所有的子类。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __extends = <span class="function"><span class="keyword">function</span><span class="params">(child,father)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> property <span class="keyword">in</span> father) &#123;</span><br><span class="line">    child[property] = father[property];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ctor</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.constructor = child; </span><br><span class="line">  &#125; </span><br><span class="line">  ctor.prototype = parent.prototype; </span><br><span class="line">  child.prototype = <span class="keyword">new</span> ctor(); </span><br><span class="line">  child.__super__ = father.prototype; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很麻烦是吧，而且也不知道会不会出错。那您也应该尝试 coffeescript 的写法了。</p>
<p><strong>情景七：</strong></p>
<p>所以，还是来试试coffeescript的写法吧</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal</span><br><span class="line">  constructor:(@name) -&gt;</span><br><span class="line">  sayHello:-&gt;</span><br><span class="line">    <span class="built_in">console</span>.log <span class="string">"Hello #&#123;this.name&#125;."</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">class</span> Cat extends Animal</span><br><span class="line">  sayHello:-&gt;</span><br><span class="line">  <span class="built_in">console</span>.log <span class="string">"喵喵喵喵喵喵，#&#123;this.name&#125;"</span></span><br><span class="line"><span class="keyword">class</span> Dog extends Animal</span><br><span class="line">  sayHello:-&gt;</span><br><span class="line">  <span class="built_in">console</span>.log <span class="string">"汪汪汪汪汪汪，#&#123;this.name&#125;"</span></span><br><span class="line">cat1 = <span class="keyword">new</span> Cat <span class="string">"kitty"</span></span><br><span class="line">dog1 = <span class="keyword">new</span> Don <span class="string">"哈士奇"</span></span><br></pre></td></tr></table></figure>
<p>通过 coffeescript 写出一个 javascript 对象继承，代码就是这么简洁。</p>
<p>在这里面，就定义了 Animal 类，还有派生类 Cat 和 Dog，分别覆盖了父类的 sayHello 的方法。写完之后，直接使用 <a href="http://koala-app.com/" target="_blank" rel="external">koala</a>编译一下，马上一段完美的继承代码生成了。</p>
<p><strong>结语：</strong></p>
<p>至此，此片面向对象的文章算是草草结束了，断断续续写了一个星期，就写成了这样子，比较糟糕。大家不妨看看下面的参考文献。</p>
<p><strong>参考文献：</strong></p>
<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new" title="new operator" target="_blank" rel="external">new</a></li>
<li><a href="http://developer.51cto.com/art/200907/134913.htm" title="javascript类和继承" target="_blank" rel="external">JavaScript类和继承：constructor属性</a></li>
<li><a href="http://koala-app.com/" title="koala" target="_blank" rel="external">koala</a></li>
<li><a href="http://coffeescript.org/" title="coffeescript" target="_blank" rel="external">coffeescript</a></li>
</ol>
<p>觉得对您有帮助，点个赞。赞赞更健康。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>前言：</strong></p>
<p>下面将探讨 javascript 面向对象编程的知识。</p>
<p>请不要刻意把 javascript 想成面向对象编程是理所当然的。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[探讨 css 中 repaint 和 reflow]]></title>
    <link href="http://shenqihui.github.io/2014/02/12/%E6%8E%A2%E8%AE%A8css%E4%B8%ADrepaint%E5%92%8Creflow/"/>
    <id>http://shenqihui.github.io/2014/02/12/探讨css中repaint和reflow/</id>
    <published>2014-02-11T21:47:00.000Z</published>
    <updated>2015-05-12T15:54:50.000Z</updated>
    <content type="html"><![CDATA[<p><strong>前言：</strong></p>
<p>页面设计中，不可避免的需要浏览器进行 repaint 和 reflow 。那到底什么是 repaint 和 reflow 呢。下面谈谈自己对 repaint 和 reflow 的理解，以及结合其他技术牛的讲解，谈谈如何优化 repaint 和 reflow 。<br><a id="more"></a><br><strong>初步介绍：</strong></p>
<p>开发一个页面时，不可避免的需要进行 repaint 和 reflow 。也就只有古来的静态页面才会不存在 repaint 和 reflow 。 repaint 主要是针对某一个 DOM 元素进行的重绘， reflow 则是回流，针对整个页面的重排。字面意思来说： repaint 就是重绘， reflow 就是回流。 repaint 和 reflow 的目的是：展示一个新的页面样貌。</p>
<p><strong>严重性：</strong></p>
<p>在性能优先的前提下，性能消耗  reflow 大于 repaint 。</p>
<p><strong>体现：</strong></p>
<p> repaint 是某个 DOM 元素进行重绘； reflow 是整个页面进行重排，也就是页面所有 DOM 元素渲染。</p>
<p><strong>如何触发：</strong></p>
<p> style 变动造成 repaint 和 reflow 。</p>
<p>不涉及任何 DOM 元素的排版问题的变动为 repaint ，例如元素的 color / text - align / text - decoration 等等属性的变动。</p>
<p>除上面所提到的 DOM 元素 style 的修改基本为 reflow 。例如元素的任何涉及长、宽、行高、边框、 display 等 style 的修改。</p>
<p><strong>常见触发场景：</strong></p>
<ol>
<li><p>触发 repaint ：</p>
<ol>
<li>color 的修改，如 color =# ddd ；</li>
<li>text - align 的修改，如 text - align = center ；</li>
<li>a : hover 也会造成重绘。</li>
<li>: hover 引起的颜色等不导致页面回流的 style 变动。</li>
<li>等等太多，一时间写出来也太难想了。</li>
</ol>
</li>
<li><p>触发 reflow ：</p>
<ol>
<li>width / height / border / margin / padding 的修改，如 width =778 px ；</li>
<li>动画，: hover 等伪类引起的元素表现改动， display = none 等造成页面回流；</li>
<li>appendChild 等 DOM 元素操作；</li>
<li>font 类 style 的修改；</li>
<li>background 的修改，注意着字面上可能以为是重绘，但是浏览器确实回流了，经过浏览器厂家的优化，部分 background 的修改只触发 repaint ，当然 IE 不用考虑；</li>
<li>scroll 页面，这个不可避免；</li>
<li>resize 页面，桌面版本的进行浏览器大小的缩放，移动端的话，还没玩过能拖动程序， resize 程序窗口大小的多窗口操作系统。</li>
<li>读取元素的属性（这个无法理解，但是技术达人是这么说的，那就把它当做定理吧）：读取元素的某些属性（ offsetLeft 、 offsetTop 、 offsetHeight 、 offsetWidth 、 scrollTop / Left / Width / Height 、 clientTop / Left / Width / Height 、 getComputedStyle ()、 currentStyle ( in   IE ))；</li>
</ol>
</li>
</ol>
<p><strong>如何避免：</strong></p>
<p>说避免那是不可能的，不然就是以前古老的静态页面了，没有交互，那在现在看来，就是一个失败的作品。所以，在我们进行网页设计的时候，就必须尽量减少页面的 repaint 和 reflow 。 repaint 和 reflow 的目的是为了展示一个新的页面，那么我们在进行页面交互时，尽量通过各种方法减少 repaint 和 reflow 但又能展示一个新的页面的目的。所以下面将结合其他技术达人的建议，通过自己的理解，给大家讲解如何避免和优化 repaint 和 reflow ：</p>
<p>下面是大神 Nicole   Sullivan 的原话：</p>
<blockquote>
<ol>
<li>Change   classes   on   the   element   you   wish   to   style  ( as   low   in   the   dom   tree   as   possible )</li>
<li>Avoid   setting   multiple   inline   styles </li>
<li>Apply   animations   to   elements   that   are   position   fixed   or   absolute </li>
<li>Trade   smoothness   for   speed </li>
<li>Avoid   tables   for   layout </li>
<li>Avoid   JavaScript   expressions   in   the   CSS ( IE   only )</li>
</ol>
</blockquote>
<ol>
<li><strong>尽可能在 DOM 末梢通过改变 class 来修改元素的 style 属性</strong>：尽可能的减少受影响的 DOM 元素。</li>
<li><strong>避免设置多项内联样式</strong>：使用常用的 class 的方式进行设置样式，以避免设置样式时访问 DOM 的低效率。</li>
<li><strong>设置动画元素 position 属性为 fixed 或者 absolute </strong>：由于当前元素从 DOM 流中独立出来，因此受影响的只有当前元素，元素 repaint 。</li>
<li><strong>牺牲平滑度满足性能</strong>：动画精度太强，会造成更多次的 repaint / reflow ，牺牲精度，能满足性能的损耗，获取性能和平滑度的平衡。</li>
<li><strong>避免使用 table 进行布局</strong>： table 的每个元素的大小以及内容的改动，都会导致整个 table 进行重新计算，造成大幅度的 repaint 或者 reflow 。改用 div 则可以进行针对性的 repaint 和避免不必要的 reflow 。</li>
<li><strong>避免在 CSS 中使用运算式</strong>：学习 CSS 的时候就知道，这个应该避免，不应该加深到这一层再去了解，因为这个的后果确实非常严重，一旦存在动画性的 repaint / reflow ，那么每一帧动画都会进行计算，性能消耗不容小觑。</li>
</ol>
<p><strong>参考文献：</strong></p>
<ol>
<li><a href="http :// www . blueidea . com / tech / web /2011/8365. asp" title=" http :// www . blueidea . com / tech / web /2011/8365. asp ">页面重构应注意的 repaint 和 reflow </a></li>
<li><a href="http :// blog . csdn . net / baiduforum / article / details /5415527" title="如何减少浏览器 repaint 和 reflow （上）">如何减少浏览器 repaint 和 reflow （上）</a></li>
<li><a href="http :// www . zhangxinxu . com / wordpress /2010/01/% E 5%9 B %9 E % E 6% B 5%81% E 4% B 8%8 E % E 9%87%8 D % E 7% BB %98% EF % BC %9 Acss % E 6%80% A 7% E 8%83% BD % E 8% AE % A 9 javascript % E 5%8 F %98% E 6%85% A 2% EF % BC %9 F /" title="回流与重绘： CSS 性能让 JavaScript 变慢？">回流与重绘： CSS 性能让 JavaScript 变慢？</a></li>
<li><a href="http :// www . stubbornella . org / content /2009/03/27/ reflows - repaints - css - performance - making - your - javascript - slow /" title=" Permanent   Link :  Reflows  &amp; amp ;  Repaints :  CSS   Performance   making   your   JavaScript   slow ?"> Reflows  &amp; amp ;  Repaints :  CSS   Performance   making   your   JavaScript   slow ?</a></li>
</ol>
<p>觉得有用，点个赞，赞赞更健康。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>前言：</strong></p>
<p>页面设计中，不可避免的需要浏览器进行 repaint 和 reflow 。那到底什么是 repaint 和 reflow 呢。下面谈谈自己对 repaint 和 reflow 的理解，以及结合其他技术牛的讲解，谈谈如何优化 repaint 和 reflow 。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[汤姆大叔设计模式学习体会：设计模式的思想]]></title>
    <link href="http://shenqihui.github.io/2014/02/08/%E6%B1%A4%E5%A7%86%E5%A4%A7%E5%8F%94%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E4%BD%93%E4%BC%9A%EF%BC%9A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%80%9D%E6%83%B3/"/>
    <id>http://shenqihui.github.io/2014/02/08/汤姆大叔设计模式学习体会：设计模式的思想/</id>
    <published>2014-02-08T00:32:00.000Z</published>
    <updated>2015-05-12T15:57:11.000Z</updated>
    <content type="html"><![CDATA[<p><strong>汤姆大叔的教程地址：<a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="external">http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html</a>，谢谢大叔。</strong></p>
<p><strong>1、单例模式</strong></p>
<p>核心是该对象只存在一个实例，要么直接写成实例的形式，</p>
<p>要么就需要写成构造函数形式，但是需要在构造函数里面通过模拟闭包的方式重新定义该构造函数，保存当前this对象，新定义的构造函数返回该this对象，达到只存在改对象只存在一个实例的目的。<br><a id="more"></a><br><strong>2、构造者模式</strong></p>
<p>其实就一构造函数，记得首字母大写。</p>
<p><strong>3、建造者模式</strong></p>
<p>给你一块砖，你能砌上墙，给你十块砖，也能通过这个方法砌上墙。可能这些砖的颜色有点不同而已。这个方法，就是建造者模式。</p>
<p>砖的颜色怎么样，墙就怎么样，跟怎么建造没关系。给你同类型的砖，这个方法就能砌好这堵墙。</p>
<p><strong>4、工厂模式</strong></p>
<p>一个有钱的傻大壮，有一天看到想要一个三轮车，他爸给了他个能做任何车的车厂。</p>
<p>傻大壮跟厂长说：“给我个帅气的三轮车”，铛的一声，厂长给了他一辆自己厂生产的三轮车。</p>
<p>又一天，傻大壮想要一个拖拉机，厂长二话没说，拉出了刚下生产线的拖拉机。</p>
<p>傻大壮耍了几天，觉得拖拉机太快了，根厂长要量人力三轮车，厂长吩咐阿四把刚出产的人力三轮车骑了过来。</p>
<p>傻大壮要去泡妞啊，厂长觉得三轮车去泡妞太霸气了，要低调，哄傻大壮开个别的。傻大壮说：“那好，给我个法拉利”。 厂长笑了笑，又叫阿四拉出了最新研发的法拉利出来。</p>
<p>这个就是工厂，这个工厂就是一个模式，给什么要求，做什么东西，当然，你说飞机火箭什么的，劳驾到其它工厂吧。</p>
<p>不过嘛，你没有傻大壮的老爸，这个工厂需要你自己来搭建咯，先从自行车的刹车皮开始做起吧，慢慢来别急啊骚年。</p>
<p><strong>5、装饰者模式</strong></p>
<p>傻大壮一直有一个理念，只买贵的不买对的。</p>
<p>一天他朋友跟他说，他的劳斯莱斯改装过之后，价值比原来高了100快啊，然后又加了个高压发动机，价值又高了200快。总价从原来的400快变成700了。</p>
<p>傻大壮开不过眼，自己的法拉利再怎么说也是600快的价值，我也要改装，超过你们，结果傻大壮把车拿去改装：喷靓丽的骚红色车漆，价值+100、改装亮瞎前灯，价值+200，傻大壮觉得，反正已经900快价值了，比你的高。</p>
<p>这就是装饰者模式，把原车拿去，换了一个改装过的车。再把这车改装，这车又更加霸气了。不过来来回回都是那个车每一次改装都没有前提和前置条件。不过大叔的代码里面，前面的代码说的确实每一次的车都被克隆了一个，把克隆了之后的给了别人。后面使用了prototype才算正确。（个人疑惑点，大叔见谅，谢谢大叔指点。）</p>
<p><strong>6、外观模式</strong></p>
<p>将相同功能但是参数顺序数量格式不同或者功能名不同的功能集合起来，通过该功能即可自动识别调用该系统支持的接口，鉴于每次都需要进行支持性判断，损耗了部分的性能。但是大大方便了程序员的工作，大部分兼容框架都会使用到该模式。如下事件绑定代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addMyEvent = <span class="function"><span class="keyword">function</span> <span class="params">(el, ev, fn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (el.addEventListener) &#123;</span><br><span class="line">        el.addEventListener(ev, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.attachEvent) &#123;</span><br><span class="line">        el[<span class="string">'e'</span>+ev+fn]=fn;</span><br><span class="line">        el[ev+fn]=<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;el[<span class="string">'e'</span>+ev+fn](e||<span class="built_in">window</span>.event);&#125;</span><br><span class="line">        el.attachEvent(<span class="string">'on'</span> + ev, el[ev+fn]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        el[<span class="string">'e'</span>+ev+fn]=fn;</span><br><span class="line">        el[ev+fn]=<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;el[<span class="string">'e'</span>+ev+fn](e||<span class="built_in">window</span>.event);&#125;</span><br><span class="line">        el[<span class="string">'on'</span> + ev] = el[ev+fn];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>7、代理模式</strong></p>
<p>大叔说了，dudu不敢送玫瑰花给酸奶小妹，大叔就帮他了。常用，不过把自己的命运交给别人把握的感觉不怎么好。</p>
<p><strong>8、观察者模式</strong></p>
<p>对于消息分发很有帮助，能通过一个地方的修改就改变其他地方。具体实现代码的时候直接模仿。</p>
<p><strong>9、策略模式</strong></p>
<p>把算法单独封装起来，区别于每次使用不使用这种模式构造的算法集都会影响用户使用。使用该种模式的话，能够方便的进行功能增加的测试，新增加的同类算法不影响现在的算法，大叔的文章中把输入验证的算法单独抽出实现算法集的集合，增加新验证方式又不影响现在算法。</p>
<p><strong>10、命令模式</strong></p>
<p>这个模式十分适合那种需要记录动作执行记录的功能，讲这个命令接口设置成字符串或者JSON格式，传输给命令接口，即可方便执行命令记录和执行命令的动作。命令格式还能自定义。</p>
<p><strong>11、迭代器模式</strong></p>
<p>主要思想是把一个属性不可修改的可遍历的聚合对象保护起来，在进行遍历时，需要采用该种模式。</p>
<p>该模式中，通过至少hasNext()和Next()两个方法，即可进行把一个聚合对象的所有可遍历属性遍历完毕。</p>
<p><strong>12、中介者模式</strong></p>
<p>使用中介封装其他对象的交互。大叔说道，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>
<p>耦合松散对编程来说那可是值得走的好方向，只是需要花点时间来解耦而已。</p>
<p>中介者模式和观察者模式有相同之处，都是通过消息驱动，用户出发一个对象的事件，传输到中介者，中介者分发下去，触发接受者的接受函数。其实我把两者混淆了。</p>
<p>重要特点是，中介者，多对多；观察者，一对多。</p>
<p><strong>13、享元模式</strong></p>
<p>方便的管理相同的层级元素。例如具备相同单元的对象及元素，能把其相同之处集合起来。还有管理 DOM 事件，利用 DOM 的冒泡和捕抓事件的特性。能把单独的小事件统一到其上一级别，通过判断 e.originalTarget 或者 e.srcElement 进行小事件的对应单独处理，但是要注意多次触发事件的问题。达到性能和内存的优化。</p>
<p><strong>14、职责链模式</strong></p>
<p>职责链就好像工厂的生产流水线，每到一个责任，都会有一个特定的接口，调用该接口就能自动通知下一任责任者就行责任的填充，每一个责任都知道其下一任职责者。最后一任职责者会调用完毕动作。</p>
<p>因此在使用职责链时，需要传入下一任职责者，生成对象，调用职责链的公用方法，通知下一任职责者。创建处事对象的时候，需要根据职责链的接口，设定动作函数。</p>
<p><strong>15、适配器模式</strong></p>
<p>该模式主要针对接口的改变，如果不想再原始对象上面进行变动，那就可以采取适配器的模式。把原有接口重新封装，实现用户需要的接口。</p>
<p>就比如一个三口插座充电器，在中国能用，在外国不能用了，就需要使用接口转换的了，现在的高端手机基本上都有多口转换。充电器到头来还是那个充电器。</p>
<p><strong>16、组合模式</strong></p>
<p>大叔说道，组合模式有明确的使用场景：1、你想表达对象的部分-整体层次结构时。2、组合对象和单个对象不同，但是使用的时候能相同使用。具体实现时需要先写一个最基础的组合方法，然后后面的单个对象的基础对象都需要继承该方法。详细实现时，参考大叔的菜单代码。</p>
<p><strong>17、模板方法</strong></p>
<p>思想：创建一个框架，搭建框架的所有方法，但是只实现相同功能，可变功能只留接口不实现，留在子类实现。</p>
<p>该框架能够延森到其它子类中，具体功能将在子类实现时补充完毕。</p>
<p><strong>18、原型模式</strong></p>
<p>这个模式比较通用，通过javascript特有的原型继承实现继承方法都会使用到该种模式。ECMA5中的是使用Odject.create方法实现原型继承。大叔提到需要注意深拷贝和浅拷贝的问题。值引用方式为浅拷贝，值返回的方式是深拷贝。</p>
<p><strong>19、状态模式</strong></p>
<p>代码很多的一篇，一个模式足足200行。</p>
<p>使用该种模式有明确场景：</p>
<p>对象的行为跟对象的状态相关，运行时刻，状态改变讲改变对象的行为，对象的行为根据状态进行。</p>
<p>写这种代码确实是劳心劳力啊。T_T||。详细实现的时候再瞧瞧大叔的代码吧。</p>
<p><strong>20、桥接模式</strong></p>
<p>最简单的桥接模式，把一个可能在不同上下文下不能运行的函数，通过改变调用方式或者改变参数的方式达到运行的目的。这个方式就成为桥。</p>
<p>大叔的例子里面，代码是运行不鸟了，因为没有环境。主要思想就是在绑定动作的时候，直接的实现内容用户可以不知道，传输正确参数（如id）进去即可判断参数进行动作或者获取数据。</p>
<p><strong>总结：</strong></p>
<p>花了一个春节假期，把大叔的设计模式这一块看完了，从编码思想方面进行了改变。但是，设计模式并非看完就能真正掌握了，没有实践，永远只能在口中胡扯。</p>
<p>talk is cheap,show me the code.</p>
<p>速成设计模式，难，没基础学设计模式，难。学习设计模式的最佳方法不是看书就知道，而是看过了书知道，了解到其思想，在自己的编码实践中，结合进去，参考前人的代码进行该模式的实现，自然水到渠成。</p>
<p>这就是这篇文章的目的：设计模式的思想。</p>
<p>（并非做了精读，只做编程作参考，如有错误，恳请大力指出，谢谢。）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>汤姆大叔的教程地址：<a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html">http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html</a>，谢谢大叔。</strong></p>
<p><strong>1、单例模式</strong></p>
<p>核心是该对象只存在一个实例，要么直接写成实例的形式，</p>
<p>要么就需要写成构造函数形式，但是需要在构造函数里面通过模拟闭包的方式重新定义该构造函数，保存当前this对象，新定义的构造函数返回该this对象，达到只存在改对象只存在一个实例的目的。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[从一道数学题弹程序员的思维：数学题，求证：(a+b%c)%c=(a+b)%c]]></title>
    <link href="http://shenqihui.github.io/2014/02/08/%E4%BB%8E%E4%B8%80%E9%81%93%E6%95%B0%E5%AD%A6%E9%A2%98%E5%BC%B9%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%80%9D%E7%BB%B4%EF%BC%9A%E6%95%B0%E5%AD%A6%E9%A2%98%EF%BC%8C%E6%B1%82%E8%AF%81%EF%BC%9A-a-b-c-c-a-b-c/"/>
    <id>http://shenqihui.github.io/2014/02/08/从一道数学题弹程序员的思维：数学题，求证：-a-b-c-c-a-b-c/</id>
    <published>2014-02-07T19:36:00.000Z</published>
    <updated>2015-05-12T15:37:13.000Z</updated>
    <content type="html"><![CDATA[<p>在学校论坛看到这道题目，全忘了的感觉。</p>
<p>如果你是高中的，那我觉得你完全没问题。但是，在这个博客园的圈子，觉得全部人都是程(ban)序(zhuan)员(gong)相关的人员，解决这个问题有点难度，毕竟，想法已经偏了。</p>
<a id="more"></a>
<p>有句话说得好，如果你拿着一个锤子，那你看什么都像一个钉子。</p>
<p>因此程序员必要的时候必须转换下思路啊。程序员思维是：已知条件，求值；而不是已知 条件 和 值，求证：这求值过程不存在bug。</p>
<p>如果有人叫你这么证明你的程序的求值过程正确，你会不会抡起你的键(zhuan)盘(tou)就拍过去了。</p>
<p>我们能做到的只是，代入 <code>a=*,b=**,c=***</code>，验证等式成立。数学题让数学家证明去吧。</p>
<p>下面回到高中的想法，谈谈这道题目吧：</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">求证：<span class="comment">(a+b%c)</span><span class="preprocessor">%</span>c=<span class="comment">(a+b)</span><span class="preprocessor">%</span>c</span><br><span class="line">解：</span><br><span class="line"></span><br><span class="line">　　假设等式左右边的值为 v，</span><br><span class="line"></span><br><span class="line">　　则 存在整数x和y，使得下面等式成立。</span><br><span class="line"></span><br><span class="line">　　a+b<span class="preprocessor">%</span>c = v + xc;（左边）</span><br><span class="line"></span><br><span class="line">　　a+b     = v + yc;（右边）</span><br><span class="line"></span><br><span class="line">　　这两式子同时成立，则可以化简为：</span><br><span class="line"></span><br><span class="line">　　存在整数 z 使得 z*c = b - b<span class="preprocessor">%</span>c 成立。</span><br><span class="line"></span><br><span class="line">　　则证明 b - b<span class="preprocessor">%</span>c 为 c 的倍数。</span><br><span class="line"></span><br><span class="line">　　显然 b - b<span class="preprocessor">%</span>c 为 c 的倍数。</span><br></pre></td></tr></table></figure>
<p>（感觉我自己也跑歪了，如果(b - b%c 为 c 的倍数)不是显然的话，我们还做什么程序员。其实 (a+b%c)%c=(a+b)%c 也是显然的。）</p>
<p>后注：发表了出来，才发现，其实这道题跟程序员思维没啥联系。纯当胡扯。</p>
<p>下面是整理某网友 <a href="http://home.cnblogs.com/u/228024/" target="_blank" rel="external">五岳</a> 提供的正确方法，谢谢指导。（我的答案已经跑歪了）</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">假设：</span><br><span class="line">　　a = x*<span class="built_in">c</span> + a0</span><br><span class="line">　　b = y*<span class="built_in">c</span> + b0</span><br><span class="line">　　其中x,y,a0,b0∈<span class="type">Z</span>,且|a0|&lt;|<span class="built_in">c</span>|,|b0|&lt;|<span class="built_in">c</span>|</span><br><span class="line">　　那么</span><br><span class="line">　　(a+b%<span class="built_in">c</span>)%<span class="built_in">c</span> = (x*<span class="built_in">c</span> + a0 + (y*<span class="built_in">c</span> + b0)%<span class="built_in">c</span>)=(x*<span class="built_in">c</span> +a0 + b0)%<span class="built_in">c</span> = (a0 + b0)%<span class="built_in">c</span></span><br><span class="line">　　而(a+b)%<span class="built_in">c</span> = (x*<span class="built_in">c</span> + a0 + y*<span class="built_in">c</span> + b0)%<span class="built_in">c</span> = (a0+b0)%<span class="built_in">c</span></span><br><span class="line">　　两式相等，得证</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>在学校论坛看到这道题目，全忘了的感觉。</p>
<p>如果你是高中的，那我觉得你完全没问题。但是，在这个博客园的圈子，觉得全部人都是程(ban)序(zhuan)员(gong)相关的人员，解决这个问题有点难度，毕竟，想法已经偏了。</p>]]>
    
    </summary>
    
  </entry>
  
</feed>